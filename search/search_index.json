{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the FESTIval's Documentation! # Download Source code We are currently working on making FESTIval publicly available at its GitHub page . To cite FESTIval, please mention its first version: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Experimental Evaluation of Spatial Indices with FESTIval. In Proceedings of the Satellite Events of the 31 st Brazilian Symposium on Databases (SBBD), p. 123\u2013128, 2016. Overview # FESTIval (short for Framework to Evaluate SpaTial Indices ) is a framework with the following goal: to provide a common environment that aids the definition, execution, and analyses of experimental evaluations of spatial indices. Conducting experimental evaluation of spatial indices is a challenging task because they are complex structures that accelerate the spatial query processing in spatial database systems and geographical information systems, can assume distinct configurations (i.e., parameter values) and, might be designed for specific storage devices (e.g., magnetic disks and flash memories); thus, a wide range of different spatial indices has been proposed in the literature. FESTIval is implemented in C as a PostgreSQL extension. PostgreSQL is a free, open-source database management system widely employed by the academia and industry. By using its internal library, we are able to add new functionalities by using a low level program language (e.g., C language) or high level program language (e.g., pl/pgSQL). More details about its extensibility are given here . FESTIval also employs PostGIS , a PostgreSQL extension that handles spatial objects in relational tables. Therefore, FESTIval acesses spatial objects stored in a column of a relational table (managed by PostGIS) in order to be manipulated by spatial indices. Features # Currently, FESTIval allows users to: evaluate disk-based spatial indices (i.e., indices for magnetic disks), such as the R-tree . evaluate flash-aware spatial indices (i.e, indices for flash memories), such as the FOR-tree , FAST-based indices , and eFIND-based indices . specify and execute user-defined workloads by using a unique environment. access an integrated data schema that stores index configurations and statistical data of executed workloads. use any spatial dataset in experiments. Default spatial datasets are also provided. reproduce executed workloads. FESTIval manages a schema in the PostgreSQL called fds . This schema is automatically created by the FESTIval when the CREATE EXTENSION command is executed in a database. By using this schema, it is possible to collect and compare statistical data of different indices and analysis their performance results. Applicability # FESTIval has been employed in many experimental evaluations conducted and reported in research papers, as listed in our Publications page . In general, FESTIval has been applied to: better understand the performance behavior of spatial indices in different storage devices, and validate new proposals of spatial indices. Please make a Pull Request to add your work on the Publications page using FESTIval! # Acknowledgments # This project is supported by the grant #2015/26687-8, S\u00e3o Paulo Research Foundation (FAPESP) in Brazil. FESTIval is mantained and developed by Anderson Chaves Carniel. Supervisor: Prof. Dr. Cristina Dutra de Aguiar Ciferri. Collaborator: Prof. Dr. Ricardo Rodrigues Ciferri. Research conducted at the University of S\u00e3o Paulo in Brazil","title":"Home"},{"location":"#welcome_to_the_festivals_documentation","text":"Download Source code We are currently working on making FESTIval publicly available at its GitHub page . To cite FESTIval, please mention its first version: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Experimental Evaluation of Spatial Indices with FESTIval. In Proceedings of the Satellite Events of the 31 st Brazilian Symposium on Databases (SBBD), p. 123\u2013128, 2016.","title":"Welcome to the FESTIval's Documentation!"},{"location":"#overview","text":"FESTIval (short for Framework to Evaluate SpaTial Indices ) is a framework with the following goal: to provide a common environment that aids the definition, execution, and analyses of experimental evaluations of spatial indices. Conducting experimental evaluation of spatial indices is a challenging task because they are complex structures that accelerate the spatial query processing in spatial database systems and geographical information systems, can assume distinct configurations (i.e., parameter values) and, might be designed for specific storage devices (e.g., magnetic disks and flash memories); thus, a wide range of different spatial indices has been proposed in the literature. FESTIval is implemented in C as a PostgreSQL extension. PostgreSQL is a free, open-source database management system widely employed by the academia and industry. By using its internal library, we are able to add new functionalities by using a low level program language (e.g., C language) or high level program language (e.g., pl/pgSQL). More details about its extensibility are given here . FESTIval also employs PostGIS , a PostgreSQL extension that handles spatial objects in relational tables. Therefore, FESTIval acesses spatial objects stored in a column of a relational table (managed by PostGIS) in order to be manipulated by spatial indices.","title":"Overview"},{"location":"#features","text":"Currently, FESTIval allows users to: evaluate disk-based spatial indices (i.e., indices for magnetic disks), such as the R-tree . evaluate flash-aware spatial indices (i.e, indices for flash memories), such as the FOR-tree , FAST-based indices , and eFIND-based indices . specify and execute user-defined workloads by using a unique environment. access an integrated data schema that stores index configurations and statistical data of executed workloads. use any spatial dataset in experiments. Default spatial datasets are also provided. reproduce executed workloads. FESTIval manages a schema in the PostgreSQL called fds . This schema is automatically created by the FESTIval when the CREATE EXTENSION command is executed in a database. By using this schema, it is possible to collect and compare statistical data of different indices and analysis their performance results.","title":"Features"},{"location":"#applicability","text":"FESTIval has been employed in many experimental evaluations conducted and reported in research papers, as listed in our Publications page . In general, FESTIval has been applied to: better understand the performance behavior of spatial indices in different storage devices, and validate new proposals of spatial indices. Please make a Pull Request to add your work on the Publications page using FESTIval!","title":"Applicability"},{"location":"#acknowledgments","text":"This project is supported by the grant #2015/26687-8, S\u00e3o Paulo Research Foundation (FAPESP) in Brazil. FESTIval is mantained and developed by Anderson Chaves Carniel. Supervisor: Prof. Dr. Cristina Dutra de Aguiar Ciferri. Collaborator: Prof. Dr. Ricardo Rodrigues Ciferri. Research conducted at the University of S\u00e3o Paulo in Brazil","title":"Acknowledgments "},{"location":"contact/","text":"For general and technical questions: contact Anderson C. Carniel by email Please make a Pull Request to add suggestions for improving and/or extending FESTIval in our GitHub page .","title":"Contact"},{"location":"contributing/","text":"Contributing to FESTIval # The project welcomes contributions from three different perspectives. You can contribute to FESTIval by making Pull Requests on FESTIval GitHub Repo . Alternately, contact Anderson Carniel by sending an email to . When a Pull Request or email is sent, Anderson Carniel will check it as soon as possible. The following sections brief the workflow of how to complete a contribution according to the three types of perspectives. Suggestion of new functionalities # Please, send us suggestions of new features to be added to FESTIval. We will certainly appreciate it. We recommend that you send us your suggestion by answering the following questions: Why the new feature is important? What the new feature should do? How the new feature should work? (if you have some tips, they will help us to consider your suggestion) Development of code # Code contributions are welcome. They should include the following information: Documentation on functions. If the code is the correction of an existing functionality, please indicate test cases that support your code. Updates on the documentation, if needed. We will then analyze your contribution and add a corresponding license header, if the change is accepted. Improvement of the documentation # Improving the FESTIval's documentation can be performed by: better explaning the FESTIval's features. adding new examples and workloads. providing new spatial datasets. correcting the current version of the documentation. and other types of action.","title":"Contributing"},{"location":"contributing/#contributing_to_festival","text":"The project welcomes contributions from three different perspectives. You can contribute to FESTIval by making Pull Requests on FESTIval GitHub Repo . Alternately, contact Anderson Carniel by sending an email to . When a Pull Request or email is sent, Anderson Carniel will check it as soon as possible. The following sections brief the workflow of how to complete a contribution according to the three types of perspectives.","title":"Contributing to FESTIval"},{"location":"contributing/#suggestion_of_new_functionalities","text":"Please, send us suggestions of new features to be added to FESTIval. We will certainly appreciate it. We recommend that you send us your suggestion by answering the following questions: Why the new feature is important? What the new feature should do? How the new feature should work? (if you have some tips, they will help us to consider your suggestion)","title":"Suggestion of new functionalities"},{"location":"contributing/#development_of_code","text":"Code contributions are welcome. They should include the following information: Documentation on functions. If the code is the correction of an existing functionality, please indicate test cases that support your code. Updates on the documentation, if needed. We will then analyze your contribution and add a corresponding license header, if the change is accepted.","title":"Development of code"},{"location":"contributing/#improvement_of_the_documentation","text":"Improving the FESTIval's documentation can be performed by: better explaning the FESTIval's features. adding new examples and workloads. providing new spatial datasets. correcting the current version of the documentation. and other types of action.","title":"Improvement of the documentation"},{"location":"install/","text":"Installation Guide # The following guide will help you to install FESTIval from the source onto various operating systems based on Linux. Downloading FESTIval # We are currently working on making FESTIval publicly available at its GitHub page . Dependencies # The FESTIval dependencies are: PostgreSQL 9.5 (or later) PostGIS 2.2.1 (or later) GEOS library (compatible with PostGIS) Flash-DBSim for Linux Note Dependencies .so of PostGIS should be located at the directory named lib of PostgreSQL (e.g., PostgreSQL/9.5/lib) Configuration # Open the Makefile using your favorite editor and modfity the following lines as follows. First part to be modified: POSTGIS_SOURCE=/opt/postgis-2.2.1 FLASHDBSIM_SOURCE=/opt/flash-dbsim-for-linux-so-c-api Second part to be modified: SHLIB_LINK = $( POSTGIS_SOURCE ) /libpgcommon/libpgcommon.a $( POSTGIS_SOURCE ) /postgis/postgis-2.2.so -L/usr/local/lib -lgeos_c -llwgeom -lrt PG_CPPFLAGS = -I/usr/local/include -I $( POSTGIS_SOURCE ) /liblwgeom/ -I $( POSTGIS_SOURCE ) /libpgcommon/ -I $( POSTGIS_SOURCE ) /postgis/ -I/usr/include/ -fPIC PG_CONFIG = pg_config PGXS := $( shell $( PG_CONFIG ) --pgxs ) include $(PGXS) Where you should check the following paths: /opt/flash-dbsim-for-linux-so-c-api is the directory of the source code of the C-API of the Flash-DBSim for Linux . Flash-DBSim for Linux is a sub-project of FESTIval that aimed at porting Flash-DBSim to Linux-based systems. Its compilation and installation guide is available here . /opt/postgis-2.2 is the directory of the source code of PostGIS. The version may vary. /usr/local/lib is the directory of the installed libraries of the operating system (including GEOS). It should be modified if really needed. /usr/local/include and /usr/include/ are directories of needed headers from libraries installed in the operating system. These directories are standards directories of a Linux system and should be modified if really needed. Installing # In the terminal at the directory of the source code of FESTIval: sudo make sudo make install Enabling FESTIval in a Database # Connect to your database using pgAdminIII or psql , and execute the following SQL statements to enable FESTIval. CREATE EXTENSION festival ; Note The database need to be created with PostGIS template or has the postgis extension enabled (i.e., by executing the SQL statement CREATE EXTENSION postgis; ). Backups If you need to do a backup of the FESTIval's data schema, please copy the content of all tables from fds to another schema and then make the backup on this new schema. This procedure is needed because of the management of extension of PostgreSQL. This command will create several tables in a new schema called fds . By using the tables of this schema, you are able to retrieve statistical data after executing operations handling spatial indices. To disable FESTIval in a database, you can simply execute the following SQL statement: DROP EXTENSION festival ; Danger Be careful before dropping a table. Disabling FESTIval will also delete its data schema, including their stored data!","title":"Download and Install"},{"location":"install/#installation_guide","text":"The following guide will help you to install FESTIval from the source onto various operating systems based on Linux.","title":"Installation Guide"},{"location":"install/#downloading_festival","text":"We are currently working on making FESTIval publicly available at its GitHub page .","title":"Downloading FESTIval"},{"location":"install/#dependencies","text":"The FESTIval dependencies are: PostgreSQL 9.5 (or later) PostGIS 2.2.1 (or later) GEOS library (compatible with PostGIS) Flash-DBSim for Linux Note Dependencies .so of PostGIS should be located at the directory named lib of PostgreSQL (e.g., PostgreSQL/9.5/lib)","title":"Dependencies"},{"location":"install/#configuration","text":"Open the Makefile using your favorite editor and modfity the following lines as follows. First part to be modified: POSTGIS_SOURCE=/opt/postgis-2.2.1 FLASHDBSIM_SOURCE=/opt/flash-dbsim-for-linux-so-c-api Second part to be modified: SHLIB_LINK = $( POSTGIS_SOURCE ) /libpgcommon/libpgcommon.a $( POSTGIS_SOURCE ) /postgis/postgis-2.2.so -L/usr/local/lib -lgeos_c -llwgeom -lrt PG_CPPFLAGS = -I/usr/local/include -I $( POSTGIS_SOURCE ) /liblwgeom/ -I $( POSTGIS_SOURCE ) /libpgcommon/ -I $( POSTGIS_SOURCE ) /postgis/ -I/usr/include/ -fPIC PG_CONFIG = pg_config PGXS := $( shell $( PG_CONFIG ) --pgxs ) include $(PGXS) Where you should check the following paths: /opt/flash-dbsim-for-linux-so-c-api is the directory of the source code of the C-API of the Flash-DBSim for Linux . Flash-DBSim for Linux is a sub-project of FESTIval that aimed at porting Flash-DBSim to Linux-based systems. Its compilation and installation guide is available here . /opt/postgis-2.2 is the directory of the source code of PostGIS. The version may vary. /usr/local/lib is the directory of the installed libraries of the operating system (including GEOS). It should be modified if really needed. /usr/local/include and /usr/include/ are directories of needed headers from libraries installed in the operating system. These directories are standards directories of a Linux system and should be modified if really needed.","title":"Configuration"},{"location":"install/#installing","text":"In the terminal at the directory of the source code of FESTIval: sudo make sudo make install","title":"Installing"},{"location":"install/#enabling_festival_in_a_database","text":"Connect to your database using pgAdminIII or psql , and execute the following SQL statements to enable FESTIval. CREATE EXTENSION festival ; Note The database need to be created with PostGIS template or has the postgis extension enabled (i.e., by executing the SQL statement CREATE EXTENSION postgis; ). Backups If you need to do a backup of the FESTIval's data schema, please copy the content of all tables from fds to another schema and then make the backup on this new schema. This procedure is needed because of the management of extension of PostgreSQL. This command will create several tables in a new schema called fds . By using the tables of this schema, you are able to retrieve statistical data after executing operations handling spatial indices. To disable FESTIval in a database, you can simply execute the following SQL statement: DROP EXTENSION festival ; Danger Be careful before dropping a table. Disabling FESTIval will also delete its data schema, including their stored data!","title":"Enabling FESTIval in a Database"},{"location":"publications/","text":"The first version of FESTIval was published in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Experimental Evaluation of Spatial Indices with FESTIval. In Proceedings of the Satellite Events of the 31 st Brazilian Symposium on Databases (SBBD), p. 123\u2013128, 2016. This version only encompasses the implementation of the following disk-based spatial indices: the R-tree and the R*-tree. FESTIval has been used as the main tool to understand the impact of SSDs on the spatial indexing context , as described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. The Performance Relation of Spatial Indexing on Hard Disk Drives and Solid State Drives. In Proceedings of the Brazilian Symposium on GeoInformatics, p. 263-174, 2016. Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Analyzing the Performance of Spatial Indices on Hard Disk Drives and Flash-based Solid State Drives. Journal of Information and Data Management 8 (1), p. 34-49, 2017. FESTIval has also been employed to measure the performance of gains of eFIND , a generic and efficient framework that transforms a disk-based spatial index into a flash-aware spatial index (e.g., transforms an R-tree to an eFIND R-tree). eFIND is described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. A generic and efficient framework for flash-aware spatial indexing. Information Systems, https://doi.org/10.1016/j.is.2018.09.004, 2018 Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. A Generic and Efficient Framework for Spatial Indexing on Flash-based Solid State Drives. In Proceedings of the 21 st European Conference on Advances in Databases and Information Systems (ADBIS), p. 229-243, 2017. FESTIval also provides support for flash simulators (e.g., FlashDBSim ) when analyzing the performance of spatial indices, such as reported in: Carniel, A. C.; Silva, T. B.; Bonicenha, K. L. S.; Ciferri, R. R.; Ciferri, C. D. A. Analyzing the Performance of Spatial Indices on Flash Memories using a Flash Simulator. In Proceedings of the 32 nd Brazilian Symposium on Databases (SBBD), p. 40-51, 2017. Carniel, A. C.; Silva, T. B.; Ciferri, C. D. A. Understanding the Applicability of Flash Simulators on the Experimental Evaluation of Spatial Indices. In 9 th Annual Non-volatile Memories Workshop (NVMW), p. 1-2, 2018. In order to facilitate the execution of experiments, FESTIval provides default spatial datasets . They are specified in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Spatial Datasets for Conducting Experimental Evaluations of Spatial Indices. In Proceedings of the 32 nd Brazilian Symposium on Databases (SBBD) - Workshop Dataset Showcase, p. 286-295, 2017. Originally, FESTIval has been developed in the context of a Ph.D. work . The main goals of this Ph.D. work are described in: Carniel, A. C.; Ciferri, C. D. A. Spatial Indexing in Flash Memories: Proposal of an Efficient and Robust Spatial Index with Durability. In Proceedings of the Satellite Events of the 31 st Brazilian Symposium on Databases (SBBD), p. 66-73, 2016. Carniel, A. C. Spatial Indexing on Flash-based Solid State Drives. In Proceedings of the VLDB 2018 PhD Workshop, p. 1-4, 2018.","title":"Publications"},{"location":"data_schema/overview/","text":"An Overview of the FESTIval's data schema - fds # The FESTIval's data schema stores information of spatial datasets that can be used by spatial indices, general and specific parameters employed by spatial indices, and statistical data of executed workloads. Collected statistical data can be used in mathematical models to measure the performance of spatial indices, considering employed parameter values, characteristics of the spatial dataset, and the employed storage device. The figure below provides the logical view of the FESTIval's data schema, called fds . This figure only shows the relationships of the relational tables by showing their primary and foreign keys. Primary keys are highlighted. The relationship between two tables are given by a directed row linking the primary key of a table to the foreign key of another table. There are two categories of data managed by FESTIval: (i) configuration of a spatial index , and (ii) statistical data of executed workloads . Configuration of a Spatial Index # The configuration of a spatial index consists of four components. Each component is shortly described below and is represented by a relational table (see the specification of a relational table by clicking on its corresponding link): Source - this table stores data about the spatial datasets that can be used by spatial indices. BasicConfiguration - this table stores the general parameters that can be employed by any spatial index. It may includes the specific information regarding the employed storage device as follows: StorageSystem - this table describes the storage system that the spatial index should employ. This can be further specialized if the storage system is the Flash-DBSim: FlashDBSimConfiguration - this table stores specific parameters of the flash memory emulated by the Flash-DBSim: VirtualFlashDevice - parameters of the flash device of the Flash-DBSim. FlashTranslationLayer - parameters of the flash translation layer of the Flash-DBSim. SpecializedConfiguration - this table generalizes the specific parameters of a spatial index. Thus, each specialization of this table represents the specific parameters of a given spatial index. The specialized tables are: RTreeConfiguration , which refers to the parameters of the R-tree. RStartConfiguration , which refers to the parameters of the R*-tree. HilbertRTreeConfiguration , which refers to the parameters of the Hilbert R-tree. FORTreeConfiguration , which refers to the parameters of the FOR-tree. FASTConfiguration , which refers to the parameters of FAST. eFINDConfiguration , which refers to the parameters of eFIND. Further, these table may use the table OccupancyRate , which stores the minimum and maximum occupancy of nodes. BufferConfiguration - this table stores the parameters of the buffer manager of the spatial index, if any. FESTIval provides a script named festival-inserts.sql that provides an extensive set of tuples for these relational tables. The default spatial indices included by this script can be downloaded at the wiki page of the FESTIval's Github project . Users are also encouraged to insert new tuples in such tables in order to create new configurations, as needed. In addition, FESTIval internally manages the following tables that represent a spatial index: IndexConfiguration - the combination of the primary key values of the four components creates an configuration for a spatial index to be hanled by FESTIval. SpatialIndex - this table represents the spatial index effectively created by the user. Note that different spatial indices can employ the same configuration; however, they can have different contents because of the operations executed in workloads. Note Users should not insert new tuples into the tables IndexConfiguration and SpatialIndex because they are internally managed by FESTIval only. Statistical Data of Executed Workloads # There are two types of statistical data managed by FESTIval: (i) general statistical data that every index operation can generate, and (ii) statistical data related to the index structure. The relational tables storing statistical data are (see the specification of a relational table by clicking on its corresponding link): Execution - this table stores general statistical data related to the execution of index operations like insertions, updates, and deletions. ReadWriteOrder - this table stores the order of reads and writes performed on the storage device by the index operations. FlashSimulatorStatistics - this table stores statistical data from the flash simulator, if it was used by the spatial index. IndexSnapshot - this table stores statistical data related to the structure of the index. PrintIndex - this table stores all index pages of the spatial index, allowing users to visualize the structure of the index using a geographical information system like QGIS . Note We do not encourage users to change the structure of the tables storing statistical data, as well as we do not encourage to manually insert new values in such tables. Be careful if you really need to modify something (e.g., consider to make a copy of this content in another temporary table).","title":"Quick start"},{"location":"data_schema/overview/#an_overview_of_the_festivals_data_schema_-_fds","text":"The FESTIval's data schema stores information of spatial datasets that can be used by spatial indices, general and specific parameters employed by spatial indices, and statistical data of executed workloads. Collected statistical data can be used in mathematical models to measure the performance of spatial indices, considering employed parameter values, characteristics of the spatial dataset, and the employed storage device. The figure below provides the logical view of the FESTIval's data schema, called fds . This figure only shows the relationships of the relational tables by showing their primary and foreign keys. Primary keys are highlighted. The relationship between two tables are given by a directed row linking the primary key of a table to the foreign key of another table. There are two categories of data managed by FESTIval: (i) configuration of a spatial index , and (ii) statistical data of executed workloads .","title":"An Overview of the FESTIval's data schema - fds"},{"location":"data_schema/overview/#configuration_of_a_spatial_index","text":"The configuration of a spatial index consists of four components. Each component is shortly described below and is represented by a relational table (see the specification of a relational table by clicking on its corresponding link): Source - this table stores data about the spatial datasets that can be used by spatial indices. BasicConfiguration - this table stores the general parameters that can be employed by any spatial index. It may includes the specific information regarding the employed storage device as follows: StorageSystem - this table describes the storage system that the spatial index should employ. This can be further specialized if the storage system is the Flash-DBSim: FlashDBSimConfiguration - this table stores specific parameters of the flash memory emulated by the Flash-DBSim: VirtualFlashDevice - parameters of the flash device of the Flash-DBSim. FlashTranslationLayer - parameters of the flash translation layer of the Flash-DBSim. SpecializedConfiguration - this table generalizes the specific parameters of a spatial index. Thus, each specialization of this table represents the specific parameters of a given spatial index. The specialized tables are: RTreeConfiguration , which refers to the parameters of the R-tree. RStartConfiguration , which refers to the parameters of the R*-tree. HilbertRTreeConfiguration , which refers to the parameters of the Hilbert R-tree. FORTreeConfiguration , which refers to the parameters of the FOR-tree. FASTConfiguration , which refers to the parameters of FAST. eFINDConfiguration , which refers to the parameters of eFIND. Further, these table may use the table OccupancyRate , which stores the minimum and maximum occupancy of nodes. BufferConfiguration - this table stores the parameters of the buffer manager of the spatial index, if any. FESTIval provides a script named festival-inserts.sql that provides an extensive set of tuples for these relational tables. The default spatial indices included by this script can be downloaded at the wiki page of the FESTIval's Github project . Users are also encouraged to insert new tuples in such tables in order to create new configurations, as needed. In addition, FESTIval internally manages the following tables that represent a spatial index: IndexConfiguration - the combination of the primary key values of the four components creates an configuration for a spatial index to be hanled by FESTIval. SpatialIndex - this table represents the spatial index effectively created by the user. Note that different spatial indices can employ the same configuration; however, they can have different contents because of the operations executed in workloads. Note Users should not insert new tuples into the tables IndexConfiguration and SpatialIndex because they are internally managed by FESTIval only.","title":"Configuration of a Spatial Index"},{"location":"data_schema/overview/#statistical_data_of_executed_workloads","text":"There are two types of statistical data managed by FESTIval: (i) general statistical data that every index operation can generate, and (ii) statistical data related to the index structure. The relational tables storing statistical data are (see the specification of a relational table by clicking on its corresponding link): Execution - this table stores general statistical data related to the execution of index operations like insertions, updates, and deletions. ReadWriteOrder - this table stores the order of reads and writes performed on the storage device by the index operations. FlashSimulatorStatistics - this table stores statistical data from the flash simulator, if it was used by the spatial index. IndexSnapshot - this table stores statistical data related to the structure of the index. PrintIndex - this table stores all index pages of the spatial index, allowing users to visualize the structure of the index using a geographical information system like QGIS . Note We do not encourage users to change the structure of the tables storing statistical data, as well as we do not encourage to manually insert new values in such tables. Be careful if you really need to modify something (e.g., consider to make a copy of this content in another temporary table).","title":"Statistical Data of Executed Workloads"},{"location":"data_schema/spec/","text":"Specification of fds # The relational tables composing fds are described as follows. Source # This table stores needed information of the spatial dataset that can be indexed. Here, a spatial dataset is represented by a relational table of the PostgreSQL containing PostGIS objects. FESTIval needs to know details from this relational table such as its name, the name of its schema, the name of the column storing spatial objects, and the column that corresponds to the primary key. Note When processing spatial queries using a spatial index, the information from the table Source is useful to process the refinement step. Hence, it is important to keep the correspondence between the spatial dataset and its spatial index. FESTIval offers some default datasets that can be indexed. They are available here . The columns of Source are described as follows: Column Description src_id It is the primary key and is an auto-increment field. schema_name It stores the name of the schema that contains the spatial objects. table_name It stores the name of the table that contains the spatial objects. column_name It stores the name of the column that contains the spatial objects. pk_name It stores the name of the primary key column of the table that contains the spatial objects. BasicConfiguration # This table stores the general parameters that can be employed by any spatial indices. In addition, the type of storage system (table StorageSystem ) is also specified. Note Every spatial index is based on a tuple of this table. The columns of BasicConfiguration are described as follows: Column Description bc_id It is the primary key and is an auto-increment field. ss_id It is the foreign key that points to the table StorageSystem . page_size It stores the index page size in bytes to be used by the spatial index. This value must be power of 2. io_access It specifies the type of I/O access, which can be the conventional method ( NORMAL ACCESS value) and the DIRECT I/O method ( DIRECT ACCESS value). The conventional method employs the library libio.h , while the DIRECT I/O method employs the library fcntl.h . refinement_type It specifies the algorithms to be employed by the refinement step when processing spatial queries. It can employ the GEOS library ( ONLY GEOS value) and the GEOS library together with the PostGIS point polygon check algorithm ( GEOS AND POINT POLYGON CHECK FROM POSTGIS value). StorageSystem # This table stores the general description of storage devices that can be linked by the table BasicConfiguration . It can also be specialized to store the parameters of an emulated flash memory (see table FlashDBSimConfiguration ). Note Every spatial index is, therefore, manipulated in a storage system. The columns of StorageSystem are described as follows: Column Description ss_id It is the primary key and can be used in other specialized tables (e.g., FlashDBSimConfiguration ). storage_system It is the type of the storage system, which can be a magnetic disk ( HDD s value), flash-based solid state drive ( Flash SSD ), or an emulated flash memory ( FlashDBSim value). If the storage system is an emulated flash memory system, more parameters are obtained from the FESTIval's data schema in order to simulate the flash memory. description It stores the description regarding the storage device employed in the experiment, such as its full specification and/or datasheet. FlashDBSimConfiguration # This table stores the needed parameters to emulate a flash memory using the Flash-DBSim , which is available here . We have ported the Flash-DBSim to linux-based systems in a project called Flash-DBSim for Linux ; thus, Flash-DBSim for Linux is a dependency of FESTIval. Note Every emulated flash memory in FESTIval currently employs the Flash-DBSim. The columns of FlashDBSimConfiguration are described as follows: Column Description ss_id It is part of the primary key and is a inherited value from the primary key of StorageSystem . ftl_id It is part of the primary key and points to the parameters related to the Flash Translation Layer of the emulated flash memory. vfd_id It is part of the primary key and points to the parameters related to the Virtual Flash Device of the emulated flash memory. Note Every tuple of FlashDBSimConfiguration is a combination of tuples from the following tables: Virtual Flash Device and FlashTranslationLayer . Hence, FlashDBSimConfiguration is a weak entity. VirtualFlashDevice # This table stores the parameters of the Virtual Flash Device of an emulated flash memory using Flash-DBSim. The columns of VirtualFlashDevice are described as follows: Column Description vfd_id It is the primary key and is an auto-increment field. nand_device_type It is an integer value that identifies the type of the virtual device. Although the Flash-DBSim has four possible virtual devices, FESTIval only allows two types of devices because of the types of statistical that can be collected. The accepted values are: 3 and 4 . While the type 3 manages the emulated flash memory in the main memory, the type 4 manages the emulated flash memory in an external file handled by the Flash-DBSim. block_count It determines the number of blocks of the emulated flash memory. page_count_per_block It defines the number of flash pages per block. page_size1 It defines the flash page size in bytes. This size is used to store data. page_size2 It defines the size in bytes of spare area per flash page. erase_limitation It specifies the number of erases that a block can handle (i.e., it defines the endurance of the emulated flash memory). read_random_time It specifies the required time to perform a random read. read_serial_time It specifies the required time to perform a sequential read. program_time It specifies the required time to perfom a write operation. erase_time It specified the required time to perform an erase operation. Note Any unit time like seconds and milliseconds employed by some columns of VirtualFlashDevice . Note that the same unit time employed here will be used in the corresponding columns that collect elapsed times in the table FlashSimulatorStatistics . FlashTranslationLayer # This table stores the parameters of the Flash Translation Layer of an emulated flash memory using Flash-DBSim. The columns of FlashTranslationLayer are described as follows: Column Description ftl_id It is the primary key and is an auto-increment field. ftl_type It is the type of the Flash Translation Layer. Currently, it can assume only the value 1 because Flash-DBSim supports only one type of Flash Translation Layer. map_list_size It stores the size of the map list between physical addresses of the virtual flash device and the logical addresses used by the flash translation layer. Commonly, it corresponds to the following formula: block_count * page_count_per_block . wear_leveling_threshold It specifies the threshold for wear-leveling control (it is related to the improvement of the endurance of the flash memory). Note The columns used in the formula of the column map_list_size are from VirtualFlashDevice ; therefore, be careful when creating a FlashDBConfiguration by combining the primary key values of the tables VirtualFlashDevice and FlashTranslationLayer . SpecializedConfiguration # RTreeConfiguration # RStartConfiguration # HilbertRTreeConfiguration # FORTreeConfiguration # FASTConfiguration # eFINDConfiguration # OccupancyRate # BufferConfiguration # IndexConfiguration # SpatialIndex # Execution # ReadWriteOrder # FlashSimulatorStatistics # IndexSnapshot # PrintIndex #","title":"Specifications"},{"location":"data_schema/spec/#specification_of_fds","text":"The relational tables composing fds are described as follows.","title":"Specification of fds"},{"location":"data_schema/spec/#source","text":"This table stores needed information of the spatial dataset that can be indexed. Here, a spatial dataset is represented by a relational table of the PostgreSQL containing PostGIS objects. FESTIval needs to know details from this relational table such as its name, the name of its schema, the name of the column storing spatial objects, and the column that corresponds to the primary key. Note When processing spatial queries using a spatial index, the information from the table Source is useful to process the refinement step. Hence, it is important to keep the correspondence between the spatial dataset and its spatial index. FESTIval offers some default datasets that can be indexed. They are available here . The columns of Source are described as follows: Column Description src_id It is the primary key and is an auto-increment field. schema_name It stores the name of the schema that contains the spatial objects. table_name It stores the name of the table that contains the spatial objects. column_name It stores the name of the column that contains the spatial objects. pk_name It stores the name of the primary key column of the table that contains the spatial objects.","title":"Source"},{"location":"data_schema/spec/#basicconfiguration","text":"This table stores the general parameters that can be employed by any spatial indices. In addition, the type of storage system (table StorageSystem ) is also specified. Note Every spatial index is based on a tuple of this table. The columns of BasicConfiguration are described as follows: Column Description bc_id It is the primary key and is an auto-increment field. ss_id It is the foreign key that points to the table StorageSystem . page_size It stores the index page size in bytes to be used by the spatial index. This value must be power of 2. io_access It specifies the type of I/O access, which can be the conventional method ( NORMAL ACCESS value) and the DIRECT I/O method ( DIRECT ACCESS value). The conventional method employs the library libio.h , while the DIRECT I/O method employs the library fcntl.h . refinement_type It specifies the algorithms to be employed by the refinement step when processing spatial queries. It can employ the GEOS library ( ONLY GEOS value) and the GEOS library together with the PostGIS point polygon check algorithm ( GEOS AND POINT POLYGON CHECK FROM POSTGIS value).","title":"BasicConfiguration"},{"location":"data_schema/spec/#storagesystem","text":"This table stores the general description of storage devices that can be linked by the table BasicConfiguration . It can also be specialized to store the parameters of an emulated flash memory (see table FlashDBSimConfiguration ). Note Every spatial index is, therefore, manipulated in a storage system. The columns of StorageSystem are described as follows: Column Description ss_id It is the primary key and can be used in other specialized tables (e.g., FlashDBSimConfiguration ). storage_system It is the type of the storage system, which can be a magnetic disk ( HDD s value), flash-based solid state drive ( Flash SSD ), or an emulated flash memory ( FlashDBSim value). If the storage system is an emulated flash memory system, more parameters are obtained from the FESTIval's data schema in order to simulate the flash memory. description It stores the description regarding the storage device employed in the experiment, such as its full specification and/or datasheet.","title":"StorageSystem"},{"location":"data_schema/spec/#flashdbsimconfiguration","text":"This table stores the needed parameters to emulate a flash memory using the Flash-DBSim , which is available here . We have ported the Flash-DBSim to linux-based systems in a project called Flash-DBSim for Linux ; thus, Flash-DBSim for Linux is a dependency of FESTIval. Note Every emulated flash memory in FESTIval currently employs the Flash-DBSim. The columns of FlashDBSimConfiguration are described as follows: Column Description ss_id It is part of the primary key and is a inherited value from the primary key of StorageSystem . ftl_id It is part of the primary key and points to the parameters related to the Flash Translation Layer of the emulated flash memory. vfd_id It is part of the primary key and points to the parameters related to the Virtual Flash Device of the emulated flash memory. Note Every tuple of FlashDBSimConfiguration is a combination of tuples from the following tables: Virtual Flash Device and FlashTranslationLayer . Hence, FlashDBSimConfiguration is a weak entity.","title":"FlashDBSimConfiguration"},{"location":"data_schema/spec/#virtualflashdevice","text":"This table stores the parameters of the Virtual Flash Device of an emulated flash memory using Flash-DBSim. The columns of VirtualFlashDevice are described as follows: Column Description vfd_id It is the primary key and is an auto-increment field. nand_device_type It is an integer value that identifies the type of the virtual device. Although the Flash-DBSim has four possible virtual devices, FESTIval only allows two types of devices because of the types of statistical that can be collected. The accepted values are: 3 and 4 . While the type 3 manages the emulated flash memory in the main memory, the type 4 manages the emulated flash memory in an external file handled by the Flash-DBSim. block_count It determines the number of blocks of the emulated flash memory. page_count_per_block It defines the number of flash pages per block. page_size1 It defines the flash page size in bytes. This size is used to store data. page_size2 It defines the size in bytes of spare area per flash page. erase_limitation It specifies the number of erases that a block can handle (i.e., it defines the endurance of the emulated flash memory). read_random_time It specifies the required time to perform a random read. read_serial_time It specifies the required time to perform a sequential read. program_time It specifies the required time to perfom a write operation. erase_time It specified the required time to perform an erase operation. Note Any unit time like seconds and milliseconds employed by some columns of VirtualFlashDevice . Note that the same unit time employed here will be used in the corresponding columns that collect elapsed times in the table FlashSimulatorStatistics .","title":"VirtualFlashDevice"},{"location":"data_schema/spec/#flashtranslationlayer","text":"This table stores the parameters of the Flash Translation Layer of an emulated flash memory using Flash-DBSim. The columns of FlashTranslationLayer are described as follows: Column Description ftl_id It is the primary key and is an auto-increment field. ftl_type It is the type of the Flash Translation Layer. Currently, it can assume only the value 1 because Flash-DBSim supports only one type of Flash Translation Layer. map_list_size It stores the size of the map list between physical addresses of the virtual flash device and the logical addresses used by the flash translation layer. Commonly, it corresponds to the following formula: block_count * page_count_per_block . wear_leveling_threshold It specifies the threshold for wear-leveling control (it is related to the improvement of the endurance of the flash memory). Note The columns used in the formula of the column map_list_size are from VirtualFlashDevice ; therefore, be careful when creating a FlashDBConfiguration by combining the primary key values of the tables VirtualFlashDevice and FlashTranslationLayer .","title":"FlashTranslationLayer"},{"location":"data_schema/spec/#specializedconfiguration","text":"","title":"SpecializedConfiguration"},{"location":"data_schema/spec/#rtreeconfiguration","text":"","title":"RTreeConfiguration"},{"location":"data_schema/spec/#rstartconfiguration","text":"","title":"RStartConfiguration"},{"location":"data_schema/spec/#hilbertrtreeconfiguration","text":"","title":"HilbertRTreeConfiguration"},{"location":"data_schema/spec/#fortreeconfiguration","text":"","title":"FORTreeConfiguration"},{"location":"data_schema/spec/#fastconfiguration","text":"","title":"FASTConfiguration"},{"location":"data_schema/spec/#efindconfiguration","text":"","title":"eFINDConfiguration"},{"location":"data_schema/spec/#occupancyrate","text":"","title":"OccupancyRate"},{"location":"data_schema/spec/#bufferconfiguration","text":"","title":"BufferConfiguration"},{"location":"data_schema/spec/#indexconfiguration","text":"","title":"IndexConfiguration"},{"location":"data_schema/spec/#spatialindex","text":"","title":"SpatialIndex"},{"location":"data_schema/spec/#execution","text":"","title":"Execution"},{"location":"data_schema/spec/#readwriteorder","text":"","title":"ReadWriteOrder"},{"location":"data_schema/spec/#flashsimulatorstatistics","text":"","title":"FlashSimulatorStatistics"},{"location":"data_schema/spec/#indexsnapshot","text":"","title":"IndexSnapshot"},{"location":"data_schema/spec/#printindex","text":"","title":"PrintIndex"},{"location":"operations/ft_adelete/","text":"FT_ADelete # Summary # FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Signatures # integer FT_ADelete (text index_name , text index_directory , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_ADelete (text apath , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); Description # FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_ADelete is atomic because it executes three SQL functions as a unique operation. FT_ADelete has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be deleted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be deleted. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_ADelete to delete a rectangular shaped object. It employs the default values of statistical data. SELECT FT_ADelete ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_ADelete to delete a spatial object from a spatial index. It informs specific information for collecting statistical data SELECT FT_ADelete ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 2 , 2 , /opt/statistical_data.sql ); See Also # The general version of FT_ADelete - FT_Delete Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"FT_ADelete"},{"location":"operations/ft_adelete/#ft_adelete","text":"","title":"FT_ADelete"},{"location":"operations/ft_adelete/#summary","text":"FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution.","title":"Summary"},{"location":"operations/ft_adelete/#signatures","text":"integer FT_ADelete (text index_name , text index_directory , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_ADelete (text apath , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_adelete/#description","text":"FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_ADelete is atomic because it executes three SQL functions as a unique operation. FT_ADelete has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be deleted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be deleted. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_adelete/#examples","text":"--using the first version of FT_ADelete to delete a rectangular shaped object. It employs the default values of statistical data. SELECT FT_ADelete ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_ADelete to delete a spatial object from a spatial index. It informs specific information for collecting statistical data SELECT FT_ADelete ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 2 , 2 , /opt/statistical_data.sql );","title":"Examples"},{"location":"operations/ft_adelete/#see_also","text":"The general version of FT_ADelete - FT_Delete Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"See Also"},{"location":"operations/ft_ainsert/","text":"FT_AInsert # Summary # FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Signatures # integer FT_AInsert (text index_name , text index_directory , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_AInsert (text apath , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); Description # FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_AInsert is atomic because it executes three SQL functions as a unique operation. FT_AInsert has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be inserted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be inserted. It can be an object of any type or format. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_Insert to insert a rectangular shaped object. It uses the default values of statistical data. SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Insert to insert a spatial object into a spatial index. It informs specific information for collecting statistical data SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 2 , 2 , /opt/statistical_data.sql ); See Also # The general version of FT_AInsert - FT_Insert Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"FT_AInsert"},{"location":"operations/ft_ainsert/#ft_ainsert","text":"","title":"FT_AInsert"},{"location":"operations/ft_ainsert/#summary","text":"FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution.","title":"Summary"},{"location":"operations/ft_ainsert/#signatures","text":"integer FT_AInsert (text index_name , text index_directory , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_AInsert (text apath , integer pointer , Geometry geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_ainsert/#description","text":"FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_AInsert is atomic because it executes three SQL functions as a unique operation. FT_AInsert has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be inserted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be inserted. It can be an object of any type or format. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_ainsert/#examples","text":"--using the first version of FT_Insert to insert a rectangular shaped object. It uses the default values of statistical data. SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Insert to insert a spatial object into a spatial index. It informs specific information for collecting statistical data SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 2 , 2 , /opt/statistical_data.sql );","title":"Examples"},{"location":"operations/ft_ainsert/#see_also","text":"The general version of FT_AInsert - FT_Insert Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"See Also"},{"location":"operations/ft_applyallmodificationsforfai/","text":"FT_ApplyAllModificationsForFAI # Summary # FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index. It returns true if the operation is successfully performed and false otherwise. Signature # Bool FT_ApplyAllModificationsForFAI (text index_name , text index_path ); Bool FT_ApplyAllModificationsForFAI (text apath ); Description # FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index (FAI). It returns true if the operation is successfully performed and false otherwise. FT_ApplyAllModificationsForFAI has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. Note If the spatial index is not flash-aware, FT_ApplyAllModificationsForFAI does nothing and returns true . A flash-aware spatial index such a FAST-based or eFIND-based spatial index employs a write buffer to store index modifications. A flushing operation is performed whenever the write buffer is full. On the other hand, modifications can still be stored in the main memory after processing an index operation. Thus, before disconnecting from the database, this function could be called in order to apply the modifications that were not written to the storage device yet. This function does not collect and store statistical data. However, collecting the order of reads and writes is possible (see FT_CollectOrderOfReadWrite ). Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Examples # --setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( efindr-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6149160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.83245731,-6011936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --applying all modifications stored in the write buffer of the eFIND R-tree SELECT FT_ApplyAllModificationsForFAI ( efindr-tree , /opt/festival_indices/ ); See Also # Creating workload - see the FT_ApplyAllModificationsForFAI being used in a workload","title":"FT_ApplyAllModificationsForFAI"},{"location":"operations/ft_applyallmodificationsforfai/#ft_applyallmodificationsforfai","text":"","title":"FT_ApplyAllModificationsForFAI"},{"location":"operations/ft_applyallmodificationsforfai/#summary","text":"FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index. It returns true if the operation is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_applyallmodificationsforfai/#signature","text":"Bool FT_ApplyAllModificationsForFAI (text index_name , text index_path ); Bool FT_ApplyAllModificationsForFAI (text apath );","title":"Signature"},{"location":"operations/ft_applyallmodificationsforfai/#description","text":"FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index (FAI). It returns true if the operation is successfully performed and false otherwise. FT_ApplyAllModificationsForFAI has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. Note If the spatial index is not flash-aware, FT_ApplyAllModificationsForFAI does nothing and returns true . A flash-aware spatial index such a FAST-based or eFIND-based spatial index employs a write buffer to store index modifications. A flushing operation is performed whenever the write buffer is full. On the other hand, modifications can still be stored in the main memory after processing an index operation. Thus, before disconnecting from the database, this function could be called in order to apply the modifications that were not written to the storage device yet. This function does not collect and store statistical data. However, collecting the order of reads and writes is possible (see FT_CollectOrderOfReadWrite ). Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned.","title":"Description"},{"location":"operations/ft_applyallmodificationsforfai/#examples","text":"--setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( efindr-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6149160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.83245731,-6011936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --applying all modifications stored in the write buffer of the eFIND R-tree SELECT FT_ApplyAllModificationsForFAI ( efindr-tree , /opt/festival_indices/ );","title":"Examples"},{"location":"operations/ft_applyallmodificationsforfai/#see_also","text":"Creating workload - see the FT_ApplyAllModificationsForFAI being used in a workload","title":"See Also"},{"location":"operations/ft_applyallmodificationsfrombuffer/","text":"FT_ApplyAllModificationsFromBuffer # Summary # FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer (e.g., LRU) of the index spatial, if any. It returns true if the operation is successfully performed and false otherwise. Signature # Bool FT_ApplyAllModificationsFromBuffer (text index_name , text index_path ); Bool FT_ApplyAllModificationsFromBuffer (text apath ); Description # FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer (e.g., LRU) of the index spatial, if any. It returns true if the operation is successfully performed and false otherwise. FT_ApplyAllModificationsFromBuffer has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. Note If the spatial index does not use a general-purpose buffer manager, FT_ApplyAllModificationsFromBuffer does nothing and returns true . The management of the general-purpose buffer includes flushing operations whenever the buffer is full. On the other hand, modifications can still be stored in the main memory after processing an index operation. Thus, before disconnecting from the database, this function could be called in order to apply the modifications that were not written to the storage device yet. This function does not collect and store statistical data. However, collecting the order of reads and writes is possible (see FT_CollectOrderOfReadWrite ). Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Examples # --setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --applying all modifications stored in the general-purpose buffer manager SELECT FT_ApplyAllModificationsFromBuffer ( r-tree , /opt/festival_indices/ ); See Also # Creating workload - see the FT_ApplyAllModificationsFromBuffer being used in a workload","title":"FT_ApplyAllModificationsFromBuffer"},{"location":"operations/ft_applyallmodificationsfrombuffer/#ft_applyallmodificationsfrombuffer","text":"","title":"FT_ApplyAllModificationsFromBuffer"},{"location":"operations/ft_applyallmodificationsfrombuffer/#summary","text":"FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer (e.g., LRU) of the index spatial, if any. It returns true if the operation is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_applyallmodificationsfrombuffer/#signature","text":"Bool FT_ApplyAllModificationsFromBuffer (text index_name , text index_path ); Bool FT_ApplyAllModificationsFromBuffer (text apath );","title":"Signature"},{"location":"operations/ft_applyallmodificationsfrombuffer/#description","text":"FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer (e.g., LRU) of the index spatial, if any. It returns true if the operation is successfully performed and false otherwise. FT_ApplyAllModificationsFromBuffer has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. Note If the spatial index does not use a general-purpose buffer manager, FT_ApplyAllModificationsFromBuffer does nothing and returns true . The management of the general-purpose buffer includes flushing operations whenever the buffer is full. On the other hand, modifications can still be stored in the main memory after processing an index operation. Thus, before disconnecting from the database, this function could be called in order to apply the modifications that were not written to the storage device yet. This function does not collect and store statistical data. However, collecting the order of reads and writes is possible (see FT_CollectOrderOfReadWrite ). Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned.","title":"Description"},{"location":"operations/ft_applyallmodificationsfrombuffer/#examples","text":"--setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --applying all modifications stored in the general-purpose buffer manager SELECT FT_ApplyAllModificationsFromBuffer ( r-tree , /opt/festival_indices/ );","title":"Examples"},{"location":"operations/ft_applyallmodificationsfrombuffer/#see_also","text":"Creating workload - see the FT_ApplyAllModificationsFromBuffer being used in a workload","title":"See Also"},{"location":"operations/ft_aqueryspatialindex/","text":"FT_AQuerySpatialIndex # Summary # FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. Signatures # setof query_result FT_AQuerySpatialIndex (text index_name , text index_directory , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); setof query_result FT_AQuerySpatialIndex (text apath , , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); Description # FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. FT_AQuerySpatialIndex is a set-returning function of the PostgreSQL. It returns query_result rows, formed by a primary key value ( id ) and a spatial object ( geom ) of the indexed dataset. FT_AQuerySpatialIndex has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. query_type is the type of spatial query to be processed. The value 1 corresponds to selection query , 2 corresponds to range query , and 3 corresponds to point query . Spatial selection is a general type of query that returns a set of spatial objects that satisfy some topological predicate (indicated by the paramerter predicate ) for a given spatial object (indicated by the parameter search_obj ). Range query specializes spatial selection by allowing rectangular-shaped search objects. Point query specializes spatial selection by allowing only the use of intersects as the topological predicate and points as search objects. More information regarding types of spatial queries is given in Gaede and G nther (1998) . search_obj is the spatial object (i.e., a PostGIS object) corresponding to the search object of the spatial query. predicate is the topological predicate to be used in the spatial query: 1 corresponds to Intersects , 2 corresponds to Overlap , 3 corresponds to Disjoint , 4 corresponds to Meet , 5 corresponds to Inside , 6 corresponds to CoveredBy , 6 corresponds to Contains , 7 corresponds to Covers , and 8 corresponds to Equals . These predicates are processed according to the 9-Intersection Model (Schneider and Behr, 2006) . proc_option refers to the type of the result of the spatial query. If it has the value equal to 1 , FT_QuerySpatialIndex returns the final result of the spatial query (i.e., process both filter and refinement steps, if needed (Gaede and G nther, 1998) ) If it has the value equal to 2 , FT_QuerySpatialIndex returns the candidates returned by the spatial index (i.e., the filter step results). statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note Some restrictions with respect to the geometric format of search_obj may be applicable. If query_type is equal to 2 , the bounding box of search_obj is considered. If query_type is equal to 3 , search_obj must be a point object. If proc_option if equal to 2 , the attribute geom of the query_result is equal to null . We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # -- range query considering the predicate Overlap select * from FT_AQuerySpatialIndex ( r-tree , /opt/festival_indices/ , 2 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 2 ); -- point query, returning only the ids of the returned objects select id from FT_AQuerySpatialIndex ( /opt/festival_indices/r-tree , 3 , ST_GeomFromText ( POINT(-6349160.26886151 -751965.038197354) , 3857 ), 1 , 1 , 2 , /opt/statistical_data.sql ); See Also # The general version of FT_AQuerySpatialIndex - FT_QuerySpatialIndex Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex V. Gaede, O. G nther, Multidimensional access methods, ACM Computing Surveys 30 (2) (1998) 170\u2013231. M. Schneider, T. Behr, Topological relationships between complex spatial objects, ACM Transactions on Database Systems 31 (1) (2006) 39\u201381.","title":"FT_AQuerySpatialIndex"},{"location":"operations/ft_aqueryspatialindex/#ft_aqueryspatialindex","text":"","title":"FT_AQuerySpatialIndex"},{"location":"operations/ft_aqueryspatialindex/#summary","text":"FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing.","title":"Summary"},{"location":"operations/ft_aqueryspatialindex/#signatures","text":"setof query_result FT_AQuerySpatialIndex (text index_name , text index_directory , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); setof query_result FT_AQuerySpatialIndex (text apath , , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_aqueryspatialindex/#description","text":"FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. FT_AQuerySpatialIndex is a set-returning function of the PostgreSQL. It returns query_result rows, formed by a primary key value ( id ) and a spatial object ( geom ) of the indexed dataset. FT_AQuerySpatialIndex has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. query_type is the type of spatial query to be processed. The value 1 corresponds to selection query , 2 corresponds to range query , and 3 corresponds to point query . Spatial selection is a general type of query that returns a set of spatial objects that satisfy some topological predicate (indicated by the paramerter predicate ) for a given spatial object (indicated by the parameter search_obj ). Range query specializes spatial selection by allowing rectangular-shaped search objects. Point query specializes spatial selection by allowing only the use of intersects as the topological predicate and points as search objects. More information regarding types of spatial queries is given in Gaede and G nther (1998) . search_obj is the spatial object (i.e., a PostGIS object) corresponding to the search object of the spatial query. predicate is the topological predicate to be used in the spatial query: 1 corresponds to Intersects , 2 corresponds to Overlap , 3 corresponds to Disjoint , 4 corresponds to Meet , 5 corresponds to Inside , 6 corresponds to CoveredBy , 6 corresponds to Contains , 7 corresponds to Covers , and 8 corresponds to Equals . These predicates are processed according to the 9-Intersection Model (Schneider and Behr, 2006) . proc_option refers to the type of the result of the spatial query. If it has the value equal to 1 , FT_QuerySpatialIndex returns the final result of the spatial query (i.e., process both filter and refinement steps, if needed (Gaede and G nther, 1998) ) If it has the value equal to 2 , FT_QuerySpatialIndex returns the candidates returned by the spatial index (i.e., the filter step results). statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note Some restrictions with respect to the geometric format of search_obj may be applicable. If query_type is equal to 2 , the bounding box of search_obj is considered. If query_type is equal to 3 , search_obj must be a point object. If proc_option if equal to 2 , the attribute geom of the query_result is equal to null . We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_aqueryspatialindex/#examples","text":"-- range query considering the predicate Overlap select * from FT_AQuerySpatialIndex ( r-tree , /opt/festival_indices/ , 2 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 2 ); -- point query, returning only the ids of the returned objects select id from FT_AQuerySpatialIndex ( /opt/festival_indices/r-tree , 3 , ST_GeomFromText ( POINT(-6349160.26886151 -751965.038197354) , 3857 ), 1 , 1 , 2 , /opt/statistical_data.sql );","title":"Examples"},{"location":"operations/ft_aqueryspatialindex/#see_also","text":"The general version of FT_AQuerySpatialIndex - FT_QuerySpatialIndex Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex V. Gaede, O. G nther, Multidimensional access methods, ACM Computing Surveys 30 (2) (1998) 170\u2013231. M. Schneider, T. Behr, Topological relationships between complex spatial objects, ACM Transactions on Database Systems 31 (1) (2006) 39\u201381.","title":"See Also"},{"location":"operations/ft_aupdate/","text":"FT_AUpdate # Summary # FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Signatures # integer FT_AUpdate (text index_name , text index_directory , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_AUpdate (text apath , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); Description # FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_AUpdate is atomic because it executes three SQL functions as a unique operation. FT_AUpdate has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. old_pointer is the primary key value of the spatial object to be updated. That is, the unique identifier that provides direct access to the register storing the spatial object. old_geom is the spatial object (i.e., a PostGIS object) to be updated. new_pointer is the new primary key value of the spatial object being updated. new_geom is the new spatial object (i.e., a PostGIS object) that will replace the old_geom . statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning new_pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_Update to update the rectangular shaped object of the FT_Insert example --only the spatial object is being updated SELECT FT_AUpdate ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_GeomFromText ( POLYGON((-6349100.26886151 -751965.038197354,-6349100.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349100.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Update. The spatial object is obtained from the underlying spatial dataset of the spatial index. It is transformed by using the function st_buffer. SELECT FT_AUpdate ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 1000 , ( SELECT ST_Buffer ( way , 50 ) FROM brazil_points2017 WHERE id = 1000 ), 4 , 2 , /opt/statistical_data.sql ); See Also # The general version of FT_AUpdate - FT_Update Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex The atomic versions of functions that insert and delete spatial objects - FT_AInsert and FT_ADelete","title":"FT_AUpdate"},{"location":"operations/ft_aupdate/#ft_aupdate","text":"","title":"FT_AUpdate"},{"location":"operations/ft_aupdate/#summary","text":"FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution.","title":"Summary"},{"location":"operations/ft_aupdate/#signatures","text":"integer FT_AUpdate (text index_name , text index_directory , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_AUpdate (text apath , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_aupdate/#description","text":"FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Note FT_AUpdate is atomic because it executes three SQL functions as a unique operation. FT_AUpdate has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. old_pointer is the primary key value of the spatial object to be updated. That is, the unique identifier that provides direct access to the register storing the spatial object. old_geom is the spatial object (i.e., a PostGIS object) to be updated. new_pointer is the new primary key value of the spatial object being updated. new_geom is the new spatial object (i.e., a PostGIS object) that will replace the old_geom . statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Warning new_pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_aupdate/#examples","text":"--using the first version of FT_Update to update the rectangular shaped object of the FT_Insert example --only the spatial object is being updated SELECT FT_AUpdate ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_GeomFromText ( POLYGON((-6349100.26886151 -751965.038197354,-6349100.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349100.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Update. The spatial object is obtained from the underlying spatial dataset of the spatial index. It is transformed by using the function st_buffer. SELECT FT_AUpdate ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 1000 , ( SELECT ST_Buffer ( way , 50 ) FROM brazil_points2017 WHERE id = 1000 ), 4 , 2 , /opt/statistical_data.sql );","title":"Examples"},{"location":"operations/ft_aupdate/#see_also","text":"The general version of FT_AUpdate - FT_Update Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex The atomic versions of functions that insert and delete spatial objects - FT_AInsert and FT_ADelete","title":"See Also"},{"location":"operations/ft_collectorderofreadwrite/","text":"ST_CollectOrderOfReadWrite # Summary # ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. It returns true if the setting is successfully performed and false otherwise. Signature # Bool ST_CollectOrderOfReadWrite (); Description # ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. It returns true if the setting is successfully performed and false otherwise. After calling this function, the order of reads and writes stops to be collected after calling FT_StoreStatisticalData . Note Collecting the order of reads and writes may require extra computation time. Thus, we recommend the use of this function to analyze patterns of access in a storage device. The order of reads and writes is collected in the main memory and is automatically deallocated when the database is disconnected. The order of reads and writes is not collected after calling an atomic operation because an atomic operation includes the execution of FT_StoreStatisticalData . Examples # --setting the execution name SELECT FT_SetExecutionName ( an insertion ); --let us store the order of reads and writes of the next atomic operation SELECT ST_CollectOrderOfReadWrite (); --the order of reads and writes is only collected for this operation -- because this operation calls the FT_StoreStatisticalData, which stops the collection of the order of reads and writes SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); See Also # Storing statistical data with FT_StoreStatisticalData","title":"FT_CollectOrderOfReadWrite"},{"location":"operations/ft_collectorderofreadwrite/#st_collectorderofreadwrite","text":"","title":"ST_CollectOrderOfReadWrite"},{"location":"operations/ft_collectorderofreadwrite/#summary","text":"ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. It returns true if the setting is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_collectorderofreadwrite/#signature","text":"Bool ST_CollectOrderOfReadWrite ();","title":"Signature"},{"location":"operations/ft_collectorderofreadwrite/#description","text":"ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. It returns true if the setting is successfully performed and false otherwise. After calling this function, the order of reads and writes stops to be collected after calling FT_StoreStatisticalData . Note Collecting the order of reads and writes may require extra computation time. Thus, we recommend the use of this function to analyze patterns of access in a storage device. The order of reads and writes is collected in the main memory and is automatically deallocated when the database is disconnected. The order of reads and writes is not collected after calling an atomic operation because an atomic operation includes the execution of FT_StoreStatisticalData .","title":"Description"},{"location":"operations/ft_collectorderofreadwrite/#examples","text":"--setting the execution name SELECT FT_SetExecutionName ( an insertion ); --let us store the order of reads and writes of the next atomic operation SELECT ST_CollectOrderOfReadWrite (); --the order of reads and writes is only collected for this operation -- because this operation calls the FT_StoreStatisticalData, which stops the collection of the order of reads and writes SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) );","title":"Examples"},{"location":"operations/ft_collectorderofreadwrite/#see_also","text":"Storing statistical data with FT_StoreStatisticalData","title":"See Also"},{"location":"operations/ft_createemptyspatialindex/","text":"FT_CreateEmptySpatialIndex # Summary # FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. It returns true if the operation is successfully performed and false otherwise. Signatures # Bool FT_CreateEmptySpatialIndex (integer index_type , text index_name , text index_directory , integer src_id , integer bc_id , integer sc_id , integer buf_id ); Bool FT_CreateEmptySpatialIndex (integer index_type , text apath , integer src_id , integer bc_id , integer sc_id , integer buf_id ); Description # FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. It returns true if the operation is successfully performed and false otherwise. Note FT_CreateEmptySpatialIndex does not insert any spatial object into the created spatial index. FT_CreateEmptySpatialIndex is employed by the workload FT_CreateSpatialIndex , which indexes all spatial objects stored in a given spatial dataset by inserting one spatial object by time into the spatial index. A spatial index consists of some configurations that specify its basic and specific parameters, as well as the spatial dataset that is linked to the spatial index. To build a spatial index, primary key values of relational tables of the FESTIval's data schema should be employed. FT_CreateEmptySpatialIndex has two versions and its parameters are: index_type is the type of the spatial index. Integer values from 1 to 10 to respectively represent the R-tree , the R*-tree , the Hilbert R-tree , the FAST R-tree , the FAST R*-tree , the FAST Hilbert R-tree , the FOR-tree , the eFIND R-tree , the eFIND R*-tree , and the eFIND Hilbert R-tree . More information about these supported indices are given here . index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. src_id is the primary key value of the table Source . It indicates the underlying spatial dataset of the spatial index. The spatial dataset determines the origin of spatial objects to be manipulated by the spatial index. For instance, the processing of spatial queries may access the spatial dataset (see FT_QuerySpatialIndex ). bc_id is the primary key value of the table BasicConfiguration . It indicates the general parameters of the spatial index, such as the page (node) size in bytes. sc_id is the primary key value of the table SpecializedConfiguration . It indicates the specific parameters of the spatial index. That is, specific parameters that is only valid for one type of index. For instance, the reinsertion percentage of an R*-tree. buf_id if the primary key value of the table BufferConfiguration . It indicates the type of the general-purpose buffer manager to be employed by the spatial index. Examples of buffers are LRU and S2Q. If the buffer size is equal to 0 , the spatial index will not employ a general-purpose buffer manager. Note index_name , index_directory , and apath should not contain special characters. FESTIval provides a set of default values for the aforementioned tables. We recommend that you see the FESTIval's data schema in order to understand the types of configurations that FESTIval manages. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Examples # --creating an empty R-tree with linear splitting algorithm and other parameters. SELECT FT_CreateEmptySpatialIndex ( 1 , /opt/linear_rtree , 7 , 6 , 18 , 4 ); --creating an empty eFIND R-tree. The buf_id=1 indicates that this index has not a general-purpose buffer manager because eFIND has its own buffer manager. SELECT FT_CreateEmptySpatialIndex ( 8 , /opt/efind_rtree , 5 , 53 , 50031 , 1 ); See Also # After constructing an empty spatial index, we are able to index spatial objects - FT_Insert Creating workload - see the FT_CreateEmptySpatialIndex being used in a workload","title":"FT_CreateEmptySpatialIndex"},{"location":"operations/ft_createemptyspatialindex/#ft_createemptyspatialindex","text":"","title":"FT_CreateEmptySpatialIndex"},{"location":"operations/ft_createemptyspatialindex/#summary","text":"FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. It returns true if the operation is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_createemptyspatialindex/#signatures","text":"Bool FT_CreateEmptySpatialIndex (integer index_type , text index_name , text index_directory , integer src_id , integer bc_id , integer sc_id , integer buf_id ); Bool FT_CreateEmptySpatialIndex (integer index_type , text apath , integer src_id , integer bc_id , integer sc_id , integer buf_id );","title":"Signatures"},{"location":"operations/ft_createemptyspatialindex/#description","text":"FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. It returns true if the operation is successfully performed and false otherwise. Note FT_CreateEmptySpatialIndex does not insert any spatial object into the created spatial index. FT_CreateEmptySpatialIndex is employed by the workload FT_CreateSpatialIndex , which indexes all spatial objects stored in a given spatial dataset by inserting one spatial object by time into the spatial index. A spatial index consists of some configurations that specify its basic and specific parameters, as well as the spatial dataset that is linked to the spatial index. To build a spatial index, primary key values of relational tables of the FESTIval's data schema should be employed. FT_CreateEmptySpatialIndex has two versions and its parameters are: index_type is the type of the spatial index. Integer values from 1 to 10 to respectively represent the R-tree , the R*-tree , the Hilbert R-tree , the FAST R-tree , the FAST R*-tree , the FAST Hilbert R-tree , the FOR-tree , the eFIND R-tree , the eFIND R*-tree , and the eFIND Hilbert R-tree . More information about these supported indices are given here . index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. src_id is the primary key value of the table Source . It indicates the underlying spatial dataset of the spatial index. The spatial dataset determines the origin of spatial objects to be manipulated by the spatial index. For instance, the processing of spatial queries may access the spatial dataset (see FT_QuerySpatialIndex ). bc_id is the primary key value of the table BasicConfiguration . It indicates the general parameters of the spatial index, such as the page (node) size in bytes. sc_id is the primary key value of the table SpecializedConfiguration . It indicates the specific parameters of the spatial index. That is, specific parameters that is only valid for one type of index. For instance, the reinsertion percentage of an R*-tree. buf_id if the primary key value of the table BufferConfiguration . It indicates the type of the general-purpose buffer manager to be employed by the spatial index. Examples of buffers are LRU and S2Q. If the buffer size is equal to 0 , the spatial index will not employ a general-purpose buffer manager. Note index_name , index_directory , and apath should not contain special characters. FESTIval provides a set of default values for the aforementioned tables. We recommend that you see the FESTIval's data schema in order to understand the types of configurations that FESTIval manages. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned.","title":"Description"},{"location":"operations/ft_createemptyspatialindex/#examples","text":"--creating an empty R-tree with linear splitting algorithm and other parameters. SELECT FT_CreateEmptySpatialIndex ( 1 , /opt/linear_rtree , 7 , 6 , 18 , 4 ); --creating an empty eFIND R-tree. The buf_id=1 indicates that this index has not a general-purpose buffer manager because eFIND has its own buffer manager. SELECT FT_CreateEmptySpatialIndex ( 8 , /opt/efind_rtree , 5 , 53 , 50031 , 1 );","title":"Examples"},{"location":"operations/ft_createemptyspatialindex/#see_also","text":"After constructing an empty spatial index, we are able to index spatial objects - FT_Insert Creating workload - see the FT_CreateEmptySpatialIndex being used in a workload","title":"See Also"},{"location":"operations/ft_delete/","text":"FT_Delete # Summary # FT_Delete makes the deletion of a spatial object indexed in a spatial index. It returns true if the deletion is successfully performed and false otherwise. Signatures # Bool FT_Delete (text index_name , text index_directory , integer pointer , Geometry geom ); Bool FT_Delete (text apath , integer pointer , Geometry geom ); Description # FT_Delete makes the deletion of a spatial object indexed in a spatial index. It returns true if the deletion is successfully performed and false otherwise. Note FT_Delete does not automatically collect statistical data of the deletion. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_Delete has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be deleted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be deleted. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_Delete to delete the rectangular shaped object of the FT_Insert example SELECT FT_Delete ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Delete to delete a spatial object from a spatial index. The spatial object is obtained from the underlying spatial dataset of the spatial index SELECT FT_Delete ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) ); See Also # The atomic version of FT_Delete - FT_ADelete Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"FT_Delete"},{"location":"operations/ft_delete/#ft_delete","text":"","title":"FT_Delete"},{"location":"operations/ft_delete/#summary","text":"FT_Delete makes the deletion of a spatial object indexed in a spatial index. It returns true if the deletion is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_delete/#signatures","text":"Bool FT_Delete (text index_name , text index_directory , integer pointer , Geometry geom ); Bool FT_Delete (text apath , integer pointer , Geometry geom );","title":"Signatures"},{"location":"operations/ft_delete/#description","text":"FT_Delete makes the deletion of a spatial object indexed in a spatial index. It returns true if the deletion is successfully performed and false otherwise. Note FT_Delete does not automatically collect statistical data of the deletion. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_Delete has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be deleted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be deleted. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_delete/#examples","text":"--using the first version of FT_Delete to delete the rectangular shaped object of the FT_Insert example SELECT FT_Delete ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Delete to delete a spatial object from a spatial index. The spatial object is obtained from the underlying spatial dataset of the spatial index SELECT FT_Delete ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) );","title":"Examples"},{"location":"operations/ft_delete/#see_also","text":"The atomic version of FT_Delete - FT_ADelete Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex","title":"See Also"},{"location":"operations/ft_insert/","text":"FT_Insert # Summary # FT_Insert makes the insertion of a spatial object together with its primary key value in a spatial index. It returns true if the insertion is successfully performed and false otherwise. Signatures # Bool FT_Insert (text index_name , text index_directory , integer pointer , Geometry geom ); Bool FT_Insert (text apath , integer pointer , Geometry geom ); Description # FT_Insert makes the insertion of a spatial object together with its primary key value in a spatial index. It returns true if the insertion is successfully performed and false otherwise. Note FT_Insert does not automatically collect statistical data of the insertion. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_Insert has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be inserted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be inserted. It can be an object of any type or format. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_Insert to insert a rectangular shaped object SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Insert to insert a spatial object into a spatial index. The spatial object is obtained from the underlying spatial dataset of the spatial index SELECT FT_Insert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) ); See Also # The atomic version of FT_Insert - FT_AInsert Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex Creating workload - see the FT_Insert being used in a workload","title":"FT_Insert"},{"location":"operations/ft_insert/#ft_insert","text":"","title":"FT_Insert"},{"location":"operations/ft_insert/#summary","text":"FT_Insert makes the insertion of a spatial object together with its primary key value in a spatial index. It returns true if the insertion is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_insert/#signatures","text":"Bool FT_Insert (text index_name , text index_directory , integer pointer , Geometry geom ); Bool FT_Insert (text apath , integer pointer , Geometry geom );","title":"Signatures"},{"location":"operations/ft_insert/#description","text":"FT_Insert makes the insertion of a spatial object together with its primary key value in a spatial index. It returns true if the insertion is successfully performed and false otherwise. Note FT_Insert does not automatically collect statistical data of the insertion. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_Insert has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. pointer is the primary key value of the spatial object to be inserted. That is, the unique identifier that provides direct access to the register storing the spatial object. geom is the spatial object (i.e., a PostGIS object) to be inserted. It can be an object of any type or format. Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_insert/#examples","text":"--using the first version of FT_Insert to insert a rectangular shaped object SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Insert to insert a spatial object into a spatial index. The spatial object is obtained from the underlying spatial dataset of the spatial index SELECT FT_Insert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) );","title":"Examples"},{"location":"operations/ft_insert/#see_also","text":"The atomic version of FT_Insert - FT_AInsert Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex Creating workload - see the FT_Insert being used in a workload","title":"See Also"},{"location":"operations/ft_queryspatialindex/","text":"FT_QuerySpatialIndex # Summary # FT_QuerySpatialIndex executes a spatial query using a given spatial index. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. Signatures # setof query_result FT_QuerySpatialIndex (text index_name , text index_directory , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 ); setof query_result FT_QuerySpatialIndex (text apath , , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 ); Description # FT_QuerySpatialIndex executes a spatial query using a given spatial index. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. Note FT_QuerySpatialIndex does not automatically collect statistical data of the spatial query. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_QuerySpatialIndex is a set-returning function of the PostgreSQL. It returns query_result rows, formed by a primary key value ( id ) and a spatial object ( geom ) of the indexed dataset. FT_QuerySpatialIndex has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. query_type is the type of spatial query to be processed. The value 1 corresponds to selection query , 2 corresponds to range query , and 3 corresponds to point query . Spatial selection is a general type of query that returns a set of spatial objects that satisfy some topological predicate (indicated by the paramerter predicate ) for a given spatial object (indicated by the parameter search_obj ). Range query specializes spatial selection by allowing rectangular-shaped search objects. Point query specializes spatial selection by allowing only the use of intersects as the topological predicate and points as search objects. More information regarding types of spatial queries is given in Gaede and G nther (1998) . search_obj is the spatial object (i.e., a PostGIS object) corresponding to the search object of the spatial query. predicate is the topological predicate to be used in the spatial query: 1 corresponds to Intersects , 2 corresponds to Overlap , 3 corresponds to Disjoint , 4 corresponds to Meet , 5 corresponds to Inside , 6 corresponds to CoveredBy , 6 corresponds to Contains , 7 corresponds to Covers , and 8 corresponds to Equals . These predicates are processed according to the 9-Intersection Model (Schneider and Behr, 2006) . proc_option refers to the type of the result of the spatial query. If it has the value equal to 1 , FT_QuerySpatialIndex returns the final result of the spatial query (i.e., process both filter and refinement steps, if needed (Gaede and G nther, 1998) ) If it has the value equal to 2 , FT_QuerySpatialIndex returns the candidates returned by the spatial index (i.e., the filter step results). Note Some restrictions with respect to the geometric format of search_obj may be applicable. If query_type is equal to 2 , the bounding box of search_obj is considered. If query_type is equal to 3 , search_obj must be a point object. If proc_option if equal to 2 , the attribute geom of the query_result is equal to null . Caution The connected user of the database must be permission to read in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. Examples # -- range query considering the predicate Overlap select * from FT_QuerySpatialIndex ( r-tree , /opt/festival_indices/ , 2 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 2 ); -- point query, returning only the ids of the returned objects select id from FT_QuerySpatialIndex ( /opt/festival_indices/r-tree , 3 , ST_GeomFromText ( POINT(-6349160.26886151 -751965.038197354) , 3857 ), 1 ); See Also # Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex V. Gaede, O. G nther, Multidimensional access methods, ACM Computing Surveys 30 (2) (1998) 170\u2013231. M. Schneider, T. Behr, Topological relationships between complex spatial objects, ACM Transactions on Database Systems 31 (1) (2006) 39\u201381.","title":"FT_QuerySpatialIndex"},{"location":"operations/ft_queryspatialindex/#ft_queryspatialindex","text":"","title":"FT_QuerySpatialIndex"},{"location":"operations/ft_queryspatialindex/#summary","text":"FT_QuerySpatialIndex executes a spatial query using a given spatial index. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing.","title":"Summary"},{"location":"operations/ft_queryspatialindex/#signatures","text":"setof query_result FT_QuerySpatialIndex (text index_name , text index_directory , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 ); setof query_result FT_QuerySpatialIndex (text apath , , integer query_type , Geometry search_obj , integer predicate , integer proc_option=1 );","title":"Signatures"},{"location":"operations/ft_queryspatialindex/#description","text":"FT_QuerySpatialIndex executes a spatial query using a given spatial index. It returns a set of spatial objects that either corresponds to the filter step or refinement step (i.e., final result) of the spatial query processing. Note FT_QuerySpatialIndex does not automatically collect statistical data of the spatial query. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . FT_QuerySpatialIndex is a set-returning function of the PostgreSQL. It returns query_result rows, formed by a primary key value ( id ) and a spatial object ( geom ) of the indexed dataset. FT_QuerySpatialIndex has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. query_type is the type of spatial query to be processed. The value 1 corresponds to selection query , 2 corresponds to range query , and 3 corresponds to point query . Spatial selection is a general type of query that returns a set of spatial objects that satisfy some topological predicate (indicated by the paramerter predicate ) for a given spatial object (indicated by the parameter search_obj ). Range query specializes spatial selection by allowing rectangular-shaped search objects. Point query specializes spatial selection by allowing only the use of intersects as the topological predicate and points as search objects. More information regarding types of spatial queries is given in Gaede and G nther (1998) . search_obj is the spatial object (i.e., a PostGIS object) corresponding to the search object of the spatial query. predicate is the topological predicate to be used in the spatial query: 1 corresponds to Intersects , 2 corresponds to Overlap , 3 corresponds to Disjoint , 4 corresponds to Meet , 5 corresponds to Inside , 6 corresponds to CoveredBy , 6 corresponds to Contains , 7 corresponds to Covers , and 8 corresponds to Equals . These predicates are processed according to the 9-Intersection Model (Schneider and Behr, 2006) . proc_option refers to the type of the result of the spatial query. If it has the value equal to 1 , FT_QuerySpatialIndex returns the final result of the spatial query (i.e., process both filter and refinement steps, if needed (Gaede and G nther, 1998) ) If it has the value equal to 2 , FT_QuerySpatialIndex returns the candidates returned by the spatial index (i.e., the filter step results). Note Some restrictions with respect to the geometric format of search_obj may be applicable. If query_type is equal to 2 , the bounding box of search_obj is considered. If query_type is equal to 3 , search_obj must be a point object. If proc_option if equal to 2 , the attribute geom of the query_result is equal to null . Caution The connected user of the database must be permission to read in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_queryspatialindex/#examples","text":"-- range query considering the predicate Overlap select * from FT_QuerySpatialIndex ( r-tree , /opt/festival_indices/ , 2 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 2 ); -- point query, returning only the ids of the returned objects select id from FT_QuerySpatialIndex ( /opt/festival_indices/r-tree , 3 , ST_GeomFromText ( POINT(-6349160.26886151 -751965.038197354) , 3857 ), 1 );","title":"Examples"},{"location":"operations/ft_queryspatialindex/#see_also","text":"Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex V. Gaede, O. G nther, Multidimensional access methods, ACM Computing Surveys 30 (2) (1998) 170\u2013231. M. Schneider, T. Behr, Topological relationships between complex spatial objects, ACM Transactions on Database Systems 31 (1) (2006) 39\u201381.","title":"See Also"},{"location":"operations/ft_setexecutionname/","text":"FT_SetExecutionName # Summary # FT_SetExecutionName sets the name used to identify collected statistical data. It returns true if the setting is successfully performed and false otherwise. Signature # Bool FT_SetExecutionName (text execution_name , integer loc_stat_data=1 ); Description # FT_SetExecutionName sets the name used to identify collected statistical data. It returns true if the setting is successfully performed and false otherwise. Its parameters are: execution_name is the name employed to identifiy collected statistical data of index operations. loc_stat_data defines where the statistical data is beging stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. Thus, FT_SetExecutionName updates the default value of the attribute execution_name of the relational table Execution accordingly. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. Thus, the execution name is only setted during the connection in the database. After calling this function, the new execution name is adopted in all next performed operations. Therefore, this is useful for give names in workloads. Note FT_SetExecutionName does not permantely changes the execution name when loc_stat_data is equal to 2 because statitiscal data is stored in a file instead of the FESTIval's data schema. Examples # --setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --changing the execution name to adequately represent the purpose of the next operation SELECT FT_SetExecutionName ( a single update ); SELECT FT_AUpdate ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) ); See Also # Creating workload - see the FT_SetExecutionName being used in a workload","title":"FT_SetExecutionName"},{"location":"operations/ft_setexecutionname/#ft_setexecutionname","text":"","title":"FT_SetExecutionName"},{"location":"operations/ft_setexecutionname/#summary","text":"FT_SetExecutionName sets the name used to identify collected statistical data. It returns true if the setting is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_setexecutionname/#signature","text":"Bool FT_SetExecutionName (text execution_name , integer loc_stat_data=1 );","title":"Signature"},{"location":"operations/ft_setexecutionname/#description","text":"FT_SetExecutionName sets the name used to identify collected statistical data. It returns true if the setting is successfully performed and false otherwise. Its parameters are: execution_name is the name employed to identifiy collected statistical data of index operations. loc_stat_data defines where the statistical data is beging stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. Thus, FT_SetExecutionName updates the default value of the attribute execution_name of the relational table Execution accordingly. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. Thus, the execution name is only setted during the connection in the database. After calling this function, the new execution name is adopted in all next performed operations. Therefore, this is useful for give names in workloads. Note FT_SetExecutionName does not permantely changes the execution name when loc_stat_data is equal to 2 because statitiscal data is stored in a file instead of the FESTIval's data schema.","title":"Description"},{"location":"operations/ft_setexecutionname/#examples","text":"--setting the execution name since we will now insert a new object SELECT FT_SetExecutionName ( a single insertion ); SELECT FT_AInsert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); --changing the execution name to adequately represent the purpose of the next operation SELECT FT_SetExecutionName ( a single update ); SELECT FT_AUpdate ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) );","title":"Examples"},{"location":"operations/ft_setexecutionname/#see_also","text":"Creating workload - see the FT_SetExecutionName being used in a workload","title":"See Also"},{"location":"operations/ft_startcollectstatistics/","text":"FT_StartCollectStatistics # Summary # FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. It returns true if the setting is successfully performed and false otherwise. Signature # Bool FT_StartCollectStatistics (bool rw=false ); Description # FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. It returns true if the setting is successfully performed and false otherwise. rw is a boolean value indicating if the order of reads and writes should also be collected. Its default value is false . After calling this function, statistical data related to the execution of the next index operations (e.g., insertion, deletion, update, and query) will be collected in the main memory. But, these data will be stored only when the following function is called: FT_StoreStatisticalData . Note Statistical data collected in the main memory is automatically deallocated when the database is disconnected. Examples # --setting the execution name SELECT FT_SetExecutionName ( an insertion followed by an update operation ); --start collecting statistical data SELECT FT_StartCollectStatistics (); --performing the operations SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) ); --storing the collected statistical data SELECT FT_StoreStatisticalData (); See Also # Creating workload - see the FT_StartCollectStatistics being used in a workload Storing statistical data with FT_StoreStatisticalData","title":"FT_StartCollectStatistics"},{"location":"operations/ft_startcollectstatistics/#ft_startcollectstatistics","text":"","title":"FT_StartCollectStatistics"},{"location":"operations/ft_startcollectstatistics/#summary","text":"FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. It returns true if the setting is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_startcollectstatistics/#signature","text":"Bool FT_StartCollectStatistics (bool rw=false );","title":"Signature"},{"location":"operations/ft_startcollectstatistics/#description","text":"FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. It returns true if the setting is successfully performed and false otherwise. rw is a boolean value indicating if the order of reads and writes should also be collected. Its default value is false . After calling this function, statistical data related to the execution of the next index operations (e.g., insertion, deletion, update, and query) will be collected in the main memory. But, these data will be stored only when the following function is called: FT_StoreStatisticalData . Note Statistical data collected in the main memory is automatically deallocated when the database is disconnected.","title":"Description"},{"location":"operations/ft_startcollectstatistics/#examples","text":"--setting the execution name SELECT FT_SetExecutionName ( an insertion followed by an update operation ); --start collecting statistical data SELECT FT_StartCollectStatistics (); --performing the operations SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) ); --storing the collected statistical data SELECT FT_StoreStatisticalData ();","title":"Examples"},{"location":"operations/ft_startcollectstatistics/#see_also","text":"Creating workload - see the FT_StartCollectStatistics being used in a workload Storing statistical data with FT_StoreStatisticalData","title":"See Also"},{"location":"operations/ft_storeindexsnapshot/","text":"FT_StoreIndexSnapshot # Summary # FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. It returns true if the storing is successfully performed and false otherwise. Signatures # Bool FT_StoreIndexSnapshot (text index_name , text index_directory , integer execution_id , bool print_index=false , integer loc_stat_data=1 , text file=NULL ); Bool FT_StoreIndexSnapshot (text apath , integer execution_id , bool print_index=false , integer loc_stat_data=1 , text file=NULL ); Description # FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. It returns true if the storing is successfully performed and false otherwise. This operation has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. execution_id is the primary key value of the table Execution. The statistical data collected and stored by FT_StoreIndexSnapshot is always associated to a tuple in the table Execution. print_index is a flag that indicates if the nodes of the index should be also be stored. Its default is false , indicating that this collection should not be performed. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. Caution If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Examples # --setting the execution name SELECT FT_SetExecutionName ( a workload focused on queries ); --performing the operations SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) ); SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1001 , ( SELECT way FROM brazil_points2017 WHERE id = 1001 ) ); SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1002 , ( SELECT way FROM brazil_points2017 WHERE id = 1002 ) ); --queries could be performed here --storing statistical data related to the index structure to analyze the impact of the last insertion on the structure of the index SELECT FT_StoreIndexSnapshot ( /opt/festival_indices/r-tree , ( SELECT max ( pe_id ) FROM fds . execution ), false , 2 , /opt/statistical_data.sql ); See Also # Collecting statistical data with FT_StartCollectStatistics Storing statistical data with FT_StoreStatisticalData","title":"FT_StoreIndexSnapshot"},{"location":"operations/ft_storeindexsnapshot/#ft_storeindexsnapshot","text":"","title":"FT_StoreIndexSnapshot"},{"location":"operations/ft_storeindexsnapshot/#summary","text":"FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. It returns true if the storing is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_storeindexsnapshot/#signatures","text":"Bool FT_StoreIndexSnapshot (text index_name , text index_directory , integer execution_id , bool print_index=false , integer loc_stat_data=1 , text file=NULL ); Bool FT_StoreIndexSnapshot (text apath , integer execution_id , bool print_index=false , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_storeindexsnapshot/#description","text":"FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. It returns true if the storing is successfully performed and false otherwise. This operation has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. execution_id is the primary key value of the table Execution. The statistical data collected and stored by FT_StoreIndexSnapshot is always associated to a tuple in the table Execution. print_index is a flag that indicates if the nodes of the index should be also be stored. Its default is false , indicating that this collection should not be performed. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. Caution If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned.","title":"Description"},{"location":"operations/ft_storeindexsnapshot/#examples","text":"--setting the execution name SELECT FT_SetExecutionName ( a workload focused on queries ); --performing the operations SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ) ); SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1001 , ( SELECT way FROM brazil_points2017 WHERE id = 1001 ) ); SELECT FT_AInsert ( /opt/festival_indices/rstartree-brazil_points2017 , 1002 , ( SELECT way FROM brazil_points2017 WHERE id = 1002 ) ); --queries could be performed here --storing statistical data related to the index structure to analyze the impact of the last insertion on the structure of the index SELECT FT_StoreIndexSnapshot ( /opt/festival_indices/r-tree , ( SELECT max ( pe_id ) FROM fds . execution ), false , 2 , /opt/statistical_data.sql );","title":"Examples"},{"location":"operations/ft_storeindexsnapshot/#see_also","text":"Collecting statistical data with FT_StartCollectStatistics Storing statistical data with FT_StoreStatisticalData","title":"See Also"},{"location":"operations/ft_storestatisticaldata/","text":"FT_StoreStatisticalData # Summary # FT_StoreStatisticalData stores the collected statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. Signatures # integer FT_StoreStatisticalData (text index_name , text index_directory , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_StoreStatisticalData (text apath , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); Description # FT_StoreStatisticalData stores the collected statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. This operation has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned. Examples # --setting the execution name SELECT FT_SetExecutionName ( an insertion followed by an update operation ); --start collecting statistical data SELECT FT_StartCollectStatistics (); --performing the operations SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) ); --storing the collected statistical data SELECT FT_StoreStatisticalData (); See Also # Creating workload - see the FT_StoreStatisticalData being used in a workload Collecting statistical data with FT_StartCollectStatistics","title":"FT_StoreStatisticalData"},{"location":"operations/ft_storestatisticaldata/#ft_storestatisticaldata","text":"","title":"FT_StoreStatisticalData"},{"location":"operations/ft_storestatisticaldata/#summary","text":"FT_StoreStatisticalData stores the collected statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution.","title":"Summary"},{"location":"operations/ft_storestatisticaldata/#signatures","text":"integer FT_StoreStatisticalData (text index_name , text index_directory , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL ); integer FT_StoreStatisticalData (text apath , integer statistic_option=1 , integer loc_stat_data=1 , text file=NULL );","title":"Signatures"},{"location":"operations/ft_storestatisticaldata/#description","text":"FT_StoreStatisticalData stores the collected statistical data. It returns the primary key value that corresponds to the identifier of the row inserted into the table Execution. This operation has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. statistic_option refers to the type of statistical data to be collected and stored. If statistic_option is equal to 1 , its default value, FESTIval collects standard statistical data to be inserted as a new tuple in the table Execution. If statistic_option is equal to 2 or 4 , FESTIval collects statistical data related to the structure of the index to be inserted as a new tuple in the table IndexSnapshot. If statistic_option is equal to 3 or 4 , FESTIval collects the nodes of the index to be inserted as new tuples in the table PrintIndex. Note that the value 4 indicates, therefore, that all types of statistical data is collected and stored. loc_stat_data defines where the statistical data should be stored. If its value is equal to 1 , its default value, the statistical data is stored directly in the FESTIval\u2019s data schema. If its value is equal to 2 , the statistical data is stored in a SQL file that can be latter loaded into the FESTIval\u2019s data schema. file is the absolute path of the SQL file that will store the statistical data, if loc_stat_data is equal to 2 . This file will be created if it does not exist. This parameter is not used if loc_stat_data is equal to 1 . Note We recommend that you see the FESTIval's data schema in order to understand the types of statistical data that can be managed. If loc_stat_data is equal to 2 , the returning value is invalid since the insertion is not made directly on the table Execution. A valid treatment is performed on the file storing the statistical data. Caution If loc_stat_data is equal to 2 , the connected user of the database must be permission to write in the directory storing this SQL file. Otherwise, an error is returned.","title":"Description"},{"location":"operations/ft_storestatisticaldata/#examples","text":"--setting the execution name SELECT FT_SetExecutionName ( an insertion followed by an update operation ); --start collecting statistical data SELECT FT_StartCollectStatistics (); --performing the operations SELECT FT_Insert ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ) ); SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_Buffer ( ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 10 ) ); --storing the collected statistical data SELECT FT_StoreStatisticalData ();","title":"Examples"},{"location":"operations/ft_storestatisticaldata/#see_also","text":"Creating workload - see the FT_StoreStatisticalData being used in a workload Collecting statistical data with FT_StartCollectStatistics","title":"See Also"},{"location":"operations/ft_update/","text":"FT_Update # Summary # FT_Update makes the update of a spatial object indexed in a spatial index. It returns true if the update is successfully performed and false otherwise. Signatures # Bool FT_Update (text index_name , text index_directory , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom ); Bool FT_Update (text apath , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom ); Description # FT_Update makes the update of a spatial object indexed in a spatial index. It returns true if the update is successfully performed and false otherwise. Note FT_Update does not automatically collect statistical data of the update. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . In general, this operation sequentially deletes the old spatial object (and its pointer) and then inserts the new spatial object (and its pointer). Thus, if the old spatial object is not found in the spatial index, FT_Update returns false . FT_Update has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. old_pointer is the primary key value of the spatial object to be updated. That is, the unique identifier that provides direct access to the register storing the spatial object. old_geom is the spatial object (i.e., a PostGIS object) to be updated. new_pointer is the new primary key value of the spatial object being updated. new_geom is the new spatial object (i.e., a PostGIS object) that will replace the old_geom . Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning new_pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset (and that they are the same object). This kind of control is out of scope of FESTIval. Examples # --using the first version of FT_Update to update the rectangular shaped object of the FT_Insert example --only the spatial object is being updated SELECT FT_Update ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_GeomFromText ( POLYGON((-6349100.26886151 -751965.038197354,-6349100.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349100.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Update. The spatial object is obtained from the underlying spatial dataset of the spatial index. It is transformed by using the function st_buffer. SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 1000 , ( SELECT ST_Buffer ( way , 50 ) FROM brazil_points2017 WHERE id = 1000 ) ); See Also # The atomic version of FT_Update - FT_AUpdate Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex Functions to insert and delete spatial objects - FT_Insert and FT_Delete","title":"FT_Update"},{"location":"operations/ft_update/#ft_update","text":"","title":"FT_Update"},{"location":"operations/ft_update/#summary","text":"FT_Update makes the update of a spatial object indexed in a spatial index. It returns true if the update is successfully performed and false otherwise.","title":"Summary"},{"location":"operations/ft_update/#signatures","text":"Bool FT_Update (text index_name , text index_directory , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom ); Bool FT_Update (text apath , integer old_pointer , Geometry old_geom , integer new_pointer , Geometry new_geom );","title":"Signatures"},{"location":"operations/ft_update/#description","text":"FT_Update makes the update of a spatial object indexed in a spatial index. It returns true if the update is successfully performed and false otherwise. Note FT_Update does not automatically collect statistical data of the update. To do this collection, make use of its equivalent atomic operation or construct workloads with auxiliary operations . In general, this operation sequentially deletes the old spatial object (and its pointer) and then inserts the new spatial object (and its pointer). Thus, if the old spatial object is not found in the spatial index, FT_Update returns false . FT_Update has two versions and its parameters are: index_name is the name of the index file. index_directory is the directory path that stores the index file. apath is the absolute path of the index file. old_pointer is the primary key value of the spatial object to be updated. That is, the unique identifier that provides direct access to the register storing the spatial object. old_geom is the spatial object (i.e., a PostGIS object) to be updated. new_pointer is the new primary key value of the spatial object being updated. new_geom is the new spatial object (i.e., a PostGIS object) that will replace the old_geom . Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning new_pointer should not be previously used by an indexed spatial object. Otherwise, spatial queries on this spatial index might return duplicate results. It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset (and that they are the same object). This kind of control is out of scope of FESTIval.","title":"Description"},{"location":"operations/ft_update/#examples","text":"--using the first version of FT_Update to update the rectangular shaped object of the FT_Insert example --only the spatial object is being updated SELECT FT_Update ( r-tree , /opt/festival_indices/ , 50 , ST_GeomFromText ( POLYGON((-6349160.26886151 -751965.038197354,-6349160.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349160.26886151 -751965.038197354)) , 3857 ), 50 , ST_GeomFromText ( POLYGON((-6349100.26886151 -751965.038197354,-6349100.26886151 -606557.85245731,-6211936.96741955 -606557.85245731,-6211936.96741955 -751965.038197354,-6349100.26886151 -751965.038197354)) , 3857 ) ); --using the second version of FT_Update. The spatial object is obtained from the underlying spatial dataset of the spatial index. It is transformed by using the function st_buffer. SELECT FT_Update ( /opt/festival_indices/rstartree-brazil_points2017 , 1000 , ( SELECT way FROM brazil_points2017 WHERE id = 1000 ), 1000 , ( SELECT ST_Buffer ( way , 50 ) FROM brazil_points2017 WHERE id = 1000 ) );","title":"Examples"},{"location":"operations/ft_update/#see_also","text":"The atomic version of FT_Update - FT_AUpdate Constructing an empty spatial index is the first step before manipulating it - FT_CreateEmptySpatialIndex Functions to insert and delete spatial objects - FT_Insert and FT_Delete","title":"See Also"},{"location":"operations/overview/","text":"An Overview of the FESTIval's Operations # FESTIval provides a set of SQL functions that allows users to create and execute workloads by using a common design. Each SQL function has the prefix FT and calls one C function internally implemented in the FESTIval\u2019s internal library that is responsible for performing the desired processing. The main advantage of this strategy is that complex implementations are hidden from users, who now can manage and test indices under a same environment. There are three types of operations: (i) general operations , (ii) auxiliary operations , and (iii) atomic operations . General Operations # These operations are responsible for handling index structures. They are: FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. FT_Insert makes the insertion of a spatial object together with its primary key value into a spatial index. FT_Delete makes the deletion of a spatial object indexed in a spatial index. FT_Update makes the update of a spatial object indexed in a spatial index. FT_QuerySpatialIndex executes a spatial query using a given spatial index. FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index. FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer of the index spatial, if any. Auxiliary Operations # These operations are responsible for managing statistical data. They are: FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. FT_StoreStatisticalData stores the collected statistical data. FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. FT_SetExecutionName sets the name used to identify collected statistical data. Atomic Operations # These operations are responsible for handling index structures, as well as for collecting and storing related statistical data. Therefore, they are combinations of general and auxiliary operations. The atomic operations are: FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data.","title":"Quick start"},{"location":"operations/overview/#an_overview_of_the_festivals_operations","text":"FESTIval provides a set of SQL functions that allows users to create and execute workloads by using a common design. Each SQL function has the prefix FT and calls one C function internally implemented in the FESTIval\u2019s internal library that is responsible for performing the desired processing. The main advantage of this strategy is that complex implementations are hidden from users, who now can manage and test indices under a same environment. There are three types of operations: (i) general operations , (ii) auxiliary operations , and (iii) atomic operations .","title":"An Overview of the FESTIval's Operations"},{"location":"operations/overview/#general_operations","text":"These operations are responsible for handling index structures. They are: FT_CreateEmptySpatialIndex initializes the structure of a spatial index. The created spatial index is empty; thus, it does not contain any indexed spatial object yet. FT_Insert makes the insertion of a spatial object together with its primary key value into a spatial index. FT_Delete makes the deletion of a spatial object indexed in a spatial index. FT_Update makes the update of a spatial object indexed in a spatial index. FT_QuerySpatialIndex executes a spatial query using a given spatial index. FT_ApplyAllModificationsForFAI applies all the modifications stored in the specialized write buffer of a flash-aware spatial index. FT_ApplyAllModificationsFromBuffer applies all the modifications stored in the general-purpose in-memory buffer of the index spatial, if any.","title":"General Operations"},{"location":"operations/overview/#auxiliary_operations","text":"These operations are responsible for managing statistical data. They are: FT_StartCollectStatistics defines the moment in which FESTIval should collect statistical data from executed operations. ST_CollectOrderOfReadWrite indicates that the order of reads and writes should be also collected. FT_StoreStatisticalData stores the collected statistical data. FT_StoreIndexSnapshot collects and stores statistical data related to the index structure. FT_SetExecutionName sets the name used to identify collected statistical data.","title":"Auxiliary Operations"},{"location":"operations/overview/#atomic_operations","text":"These operations are responsible for handling index structures, as well as for collecting and storing related statistical data. Therefore, they are combinations of general and auxiliary operations. The atomic operations are: FT_AInsert is the atomic version of FT_Insert . It makes the insertion of a spatial object together with its primary key value in a spatial index, and collects and stores related statistical data. FT_ADelete is the atomic version of FT_Delete . It makes the deletion of a spatial object indexed in a spatial index, and collects and stores related statistical data. FT_AUpdate is the atomic version of FT_Update . It makes the update of a spatial object indexed in a spatial index, and collects and stores related statistical data. FT_AQuerySpatialIndex is the atomic version of FT_QuerySpatialIndex . It executes a spatial query using a given spatial index, and collects and stores related statistical data.","title":"Atomic Operations"},{"location":"workloads/ft_createspatialindex/","text":"FT_CreateSpatialIndex # Summary # FT_CreateSpatialIndex builds a spatial index by inserting spatial objects stored in a spatial dataset. The elements are indexed one-by-one. It returns true if the spatial index is successfully constructed and false otherwise. Signature # Bool FT_CreateSpatialIndex (integer index_id , text apath , integer src_id , integer bc_id , integer sc_id , integer buf_id , bool apply_fai=false , bool apply_stdbuffer=false , integer statistic_option=1 , integer location_stat_data=1 , text file=NULL ); Description # FT_CreateSpatialIndex builds a spatial index by inserting spatial objects stored in a spatial dataset. The elements are indexed one-by-one. It returns true if the spatial index is successfully constructed and false otherwise. FT_CreateSpatialIndex is a workload that employs the following FESTIval operations: FT_StartCollectStatistics . FT_CreateEmptySpatialIndex . FT_Insert . FT_ApplyAllModificationsForFAI . FT_ApplyAllModificationsFromBuffer . FT_StoreStatisticalData . Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. FT_CreateSpatialIndex is defined as follows: CREATE OR REPLACE FUNCTION FT_CreateSpatialIndex ( index_id int4 , apath text , src_id int4 , bc_id int4 , sc_id int4 , buf_id int4 , apply_fai bool default false , apply_stdbuffer bool default false , statistic_option int4 default 1 , location_stat_data int4 default 1 , file text default NULL ) RETURNS bool AS $ BODY$ DECLARE src REFCURSOR ; rec RECORD ; i INTEGER ; total INTEGER : = 0 ; sch VARCHAR ; tab VARCHAR ; colu VARCHAR ; pk VARCHAR ; BEGIN EXECUTE SELECT schema_name, table_name, column_name, pk_name FROM fds.source WHERE src id = $1 INTO sch , tab , colu , pk USING src id ; EXECUTE SELECT count(*) FROM || sch || . || tab INTO total ; PERFORM FT_StartCollectStatistics (); PERFORM FT_CreateEmptySpatialIndex ( index_id , apath , src_id , bc_id , sc_id , buf_id ); i : = 0 ; WHILE ( i = total ) LOOP OPEN src FOR EXECUTE SELECT || pk || as pk, || colu || as geom FROM || sch || . || tab || ORDER BY || pk || LIMIT 100000 OFFSET $1 USING i ; LOOP FETCH src INTO rec ; EXIT WHEN NOT FOUND ; PERFORM FT_Insert ( apath , rec . pk , rec . geom ); END LOOP ; CLOSE src ; i : = i + 100000 ; END LOOP ; IF ( apply_fai AND ( index_id = 4 OR index_id = 5 OR index_id = 6 OR index_id = 7 OR index_id = 8 OR index_id = 9 OR index_id = 10 )) THEN PERFORM FT_ApplyAllModificationsForFAI ( apath ); END IF ; IF ( apply_stdbuffer ) THEN PERFORM FT_ApplyAllModificationsFromBuffer ( apath ); END IF ; PERFORM FT_StoreStatisticalData ( apath , statistic_option , location_stat_data , file ); RETURN true ; END $ BODY$ LANGUAGE plpgsql VOLATILE COST 500 ; Examples of usage # --first example: SELECT FT_SetExecutionName ( Creating R-tree over brazil_points2017 ); SELECT FT_CreateSpatialIndex ( 1 , /opt/linear_rtree , 7 , 6 , 18 , 4 ); --second example: SELECT FT_SetExecutionName ( Creating R-tree over brazil_points2017 ); SELECT FT_CreateSpatialIndex ( 1 , /opt/linear_rtree2 , 7 , 6 , 18 , 4 , false , false , 4 );","title":"FT_CreateSpatialIndex"},{"location":"workloads/ft_createspatialindex/#ft_createspatialindex","text":"","title":"FT_CreateSpatialIndex"},{"location":"workloads/ft_createspatialindex/#summary","text":"FT_CreateSpatialIndex builds a spatial index by inserting spatial objects stored in a spatial dataset. The elements are indexed one-by-one. It returns true if the spatial index is successfully constructed and false otherwise.","title":"Summary"},{"location":"workloads/ft_createspatialindex/#signature","text":"Bool FT_CreateSpatialIndex (integer index_id , text apath , integer src_id , integer bc_id , integer sc_id , integer buf_id , bool apply_fai=false , bool apply_stdbuffer=false , integer statistic_option=1 , integer location_stat_data=1 , text file=NULL );","title":"Signature"},{"location":"workloads/ft_createspatialindex/#description","text":"FT_CreateSpatialIndex builds a spatial index by inserting spatial objects stored in a spatial dataset. The elements are indexed one-by-one. It returns true if the spatial index is successfully constructed and false otherwise. FT_CreateSpatialIndex is a workload that employs the following FESTIval operations: FT_StartCollectStatistics . FT_CreateEmptySpatialIndex . FT_Insert . FT_ApplyAllModificationsForFAI . FT_ApplyAllModificationsFromBuffer . FT_StoreStatisticalData . Caution The connected user of the database must be permission to read and write in the directory storing the index file. Otherwise, an error is returned. Warning It is important to keep the correspondence between the spatial index and its underlying spatial dataset. Hence, make sure that every indexed spatial object also exists in its underlying spatial dataset. This kind of control is out of scope of FESTIval. FT_CreateSpatialIndex is defined as follows: CREATE OR REPLACE FUNCTION FT_CreateSpatialIndex ( index_id int4 , apath text , src_id int4 , bc_id int4 , sc_id int4 , buf_id int4 , apply_fai bool default false , apply_stdbuffer bool default false , statistic_option int4 default 1 , location_stat_data int4 default 1 , file text default NULL ) RETURNS bool AS $ BODY$ DECLARE src REFCURSOR ; rec RECORD ; i INTEGER ; total INTEGER : = 0 ; sch VARCHAR ; tab VARCHAR ; colu VARCHAR ; pk VARCHAR ; BEGIN EXECUTE SELECT schema_name, table_name, column_name, pk_name FROM fds.source WHERE src id = $1 INTO sch , tab , colu , pk USING src id ; EXECUTE SELECT count(*) FROM || sch || . || tab INTO total ; PERFORM FT_StartCollectStatistics (); PERFORM FT_CreateEmptySpatialIndex ( index_id , apath , src_id , bc_id , sc_id , buf_id ); i : = 0 ; WHILE ( i = total ) LOOP OPEN src FOR EXECUTE SELECT || pk || as pk, || colu || as geom FROM || sch || . || tab || ORDER BY || pk || LIMIT 100000 OFFSET $1 USING i ; LOOP FETCH src INTO rec ; EXIT WHEN NOT FOUND ; PERFORM FT_Insert ( apath , rec . pk , rec . geom ); END LOOP ; CLOSE src ; i : = i + 100000 ; END LOOP ; IF ( apply_fai AND ( index_id = 4 OR index_id = 5 OR index_id = 6 OR index_id = 7 OR index_id = 8 OR index_id = 9 OR index_id = 10 )) THEN PERFORM FT_ApplyAllModificationsForFAI ( apath ); END IF ; IF ( apply_stdbuffer ) THEN PERFORM FT_ApplyAllModificationsFromBuffer ( apath ); END IF ; PERFORM FT_StoreStatisticalData ( apath , statistic_option , location_stat_data , file ); RETURN true ; END $ BODY$ LANGUAGE plpgsql VOLATILE COST 500 ;","title":"Description"},{"location":"workloads/ft_createspatialindex/#examples_of_usage","text":"--first example: SELECT FT_SetExecutionName ( Creating R-tree over brazil_points2017 ); SELECT FT_CreateSpatialIndex ( 1 , /opt/linear_rtree , 7 , 6 , 18 , 4 ); --second example: SELECT FT_SetExecutionName ( Creating R-tree over brazil_points2017 ); SELECT FT_CreateSpatialIndex ( 1 , /opt/linear_rtree2 , 7 , 6 , 18 , 4 , false , false , 4 );","title":"Examples of usage"},{"location":"workloads/overview/","text":"Creating and Execution Workloads # FESTIval provides a set of SQL functions that allows users to create and execute workloads by using a common design. By using them, users are able to write SQL functions using the SQL Procedural Language of the PostgreSQL (PL/pgSQL). Hence, users create workloads as user-defined functions in PL/pgSQL and execute them in SQL SELECT statements. Here, we provide a quick guide to help users to manage their workloads. This guide can be seem as tips and best practices for using FESTIval. Setting a name for executions # Before executing a user-defined function that executes a set of operations implemented by FESTIval, it is important to provide a name for the execution. For instance: -- it is a good practice to provide an execution name before executing a simple operation or a set of operations SELECT FT_SetExecutionName ( SPECIFY A MEANINGFUL NAME FOR THE NEXT COMMANDS TO BE EXECUTED ); --now you execute your workload here. Extracting statistical results # After executing a workload, users can issue SQL SELECT statements to retrieve performance results. For instance, the following command returns the required index time to process a given workload: SELECT index_time FROM fds . execution WHERE execution_name = THE MEANINGFUL NAME THAT YOU DEFINED DURING THE EXECUTION OF YOUR WORKLOAD ; Note the importance of setting a name for the execution. SQL SELECT statements could also include other columns containing statistical values, such as the number of writes and reads. If the workload is executed multiple times, we can write SQL SELECT statements that yield the average index time and its standard deviation. For instance: SELECT avg ( index_time ), stddev ( index_time ) FROM fds . execution WHERE execution_name = THE MEANINGFUL NAME THAT YOU DEFINED DURING THE EXECUTION OF YOUR WORKLOAD ; The aforementioned examples are very simple SQL SELECT statements. Complex queries can also be written, involving joins with other tables of the FESTIval's data schema . Examples of Workload # Here, we provide an example of workload that is already included in the FESTIval: the construction of a spatial index inserting one spatial object by time. This workload is called FT_CreateSpatialIndex . You can include your workload here (with the reference of a paper that has employed it, if any) by making Pull Requests on FESTIval GitHub Repo . Alternately, contact Anderson Carniel by sending an email to .","title":"Quick start"},{"location":"workloads/overview/#creating_and_execution_workloads","text":"FESTIval provides a set of SQL functions that allows users to create and execute workloads by using a common design. By using them, users are able to write SQL functions using the SQL Procedural Language of the PostgreSQL (PL/pgSQL). Hence, users create workloads as user-defined functions in PL/pgSQL and execute them in SQL SELECT statements. Here, we provide a quick guide to help users to manage their workloads. This guide can be seem as tips and best practices for using FESTIval.","title":"Creating and Execution Workloads"},{"location":"workloads/overview/#setting_a_name_for_executions","text":"Before executing a user-defined function that executes a set of operations implemented by FESTIval, it is important to provide a name for the execution. For instance: -- it is a good practice to provide an execution name before executing a simple operation or a set of operations SELECT FT_SetExecutionName ( SPECIFY A MEANINGFUL NAME FOR THE NEXT COMMANDS TO BE EXECUTED ); --now you execute your workload here.","title":"Setting a name for executions"},{"location":"workloads/overview/#extracting_statistical_results","text":"After executing a workload, users can issue SQL SELECT statements to retrieve performance results. For instance, the following command returns the required index time to process a given workload: SELECT index_time FROM fds . execution WHERE execution_name = THE MEANINGFUL NAME THAT YOU DEFINED DURING THE EXECUTION OF YOUR WORKLOAD ; Note the importance of setting a name for the execution. SQL SELECT statements could also include other columns containing statistical values, such as the number of writes and reads. If the workload is executed multiple times, we can write SQL SELECT statements that yield the average index time and its standard deviation. For instance: SELECT avg ( index_time ), stddev ( index_time ) FROM fds . execution WHERE execution_name = THE MEANINGFUL NAME THAT YOU DEFINED DURING THE EXECUTION OF YOUR WORKLOAD ; The aforementioned examples are very simple SQL SELECT statements. Complex queries can also be written, involving joins with other tables of the FESTIval's data schema .","title":"Extracting statistical results"},{"location":"workloads/overview/#examples_of_workload","text":"Here, we provide an example of workload that is already included in the FESTIval: the construction of a spatial index inserting one spatial object by time. This workload is called FT_CreateSpatialIndex . You can include your workload here (with the reference of a paper that has employed it, if any) by making Pull Requests on FESTIval GitHub Repo . Alternately, contact Anderson Carniel by sending an email to .","title":"Examples of Workload"}]}